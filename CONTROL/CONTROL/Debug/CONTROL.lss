
CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000196  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ad  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ff  00000000  00000000  000007e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e5  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000343  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d8  00000000  00000000  00001377  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000144f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__vector_3>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	4a c0       	rjmp	.+148    	; 0xa8 <__vector_9>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a4 36       	cpi	r26, 0x64	; 100
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	51 d0       	rcall	.+162    	; 0xe2 <main>
  40:	6e c0       	rjmp	.+220    	; 0x11e <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_3>:
volatile char key_flag_ON = 0, key_flag_Power = 0;
volatile char key_state_ON = 0;
volatile char cnt = 0;

ISR(PCINT1_vect)
{
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	8f 93       	push	r24
  50:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  52:	83 ed       	ldi	r24, 0xD3	; 211
  54:	90 e3       	ldi	r25, 0x30	; 48
  56:	01 97       	sbiw	r24, 0x01	; 1
  58:	f1 f7       	brne	.-4      	; 0x56 <__vector_3+0x12>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <__vector_3+0x18>
  5c:	00 00       	nop
	_delay_ms(50);
	if(!(PINB & 0x01))
  5e:	b0 99       	sbic	0x16, 0	; 22
  60:	0e c0       	rjmp	.+28     	; 0x7e <__vector_3+0x3a>
	{
		if(!key_flag_ON)
  62:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <key_flag_ON>
  66:	81 11       	cpse	r24, r1
  68:	0c c0       	rjmp	.+24     	; 0x82 <__vector_3+0x3e>
		{
			key_flag_ON = 1;
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <key_flag_ON>
			key_state_ON = !key_state_ON;
  70:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <key_state_ON>
  74:	91 11       	cpse	r25, r1
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <key_state_ON>
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__vector_3+0x3e>
		}
	}
	else
	{
		key_flag_ON = 0;
  7e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <key_flag_ON>
	}
	if(!(PINB & 0x02))
  82:	b1 99       	sbic	0x16, 1	; 22
  84:	08 c0       	rjmp	.+16     	; 0x96 <__vector_3+0x52>
	{
		if(!key_flag_Power)
  86:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <key_flag_Power>
  8a:	81 11       	cpse	r24, r1
  8c:	06 c0       	rjmp	.+12     	; 0x9a <__vector_3+0x56>
		{
			key_flag_Power = 1;
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <key_flag_Power>
  94:	02 c0       	rjmp	.+4      	; 0x9a <__vector_3+0x56>
		}
	}
	else
	{
		key_flag_Power = 0;
  96:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <key_flag_Power>
	}
}
  9a:	9f 91       	pop	r25
  9c:	8f 91       	pop	r24
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <__vector_9>:


// 0.5s
ISR(TIM0_COMPA_vect) 
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	cnt++;
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(cnt >= 2)
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	30 f0       	brcs	.+12     	; 0xd4 <__vector_9+0x2c>
	{
		PORTA ^= (1 << STATE_LED);
  c8:	9b b3       	in	r25, 0x1b	; 27
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	89 27       	eor	r24, r25
  ce:	8b bb       	out	0x1b, r24	; 27
		cnt = 0;
  d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <main>:

int main(void)
{
	DDRA |=	(1 << PORTA0) | (1 << PORTA1) | (1 << PORTA2) | (1 << PORTA3) | (1 << PORTA7);
  e2:	8a b3       	in	r24, 0x1a	; 26
  e4:	8f 68       	ori	r24, 0x8F	; 143
  e6:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1 << PORTB2);
  e8:	ba 9a       	sbi	0x17, 2	; 23
	DDRB &=	~(1 << PORTB0) | ~(1 << PORTB1);
  ea:	87 b3       	in	r24, 0x17	; 23
  ec:	87 bb       	out	0x17, r24	; 23

	ON_STATE;		// 전원 입력 시 LED ON
  ee:	db 9a       	sbi	0x1b, 3	; 27
	
	// PIN Change Interrupt
	MCUCR |= (1 << ISC01);
  f0:	85 b7       	in	r24, 0x35	; 53
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	85 bf       	out	0x35, r24	; 53
	GIMSK = (1 << PCIE1);
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	8b bf       	out	0x3b, r24	; 59
	GIFR = (1 << PCIF1);
  fa:	8a bf       	out	0x3a, r24	; 58
	PCMSK1 = (1 << PCINT8) | (1 << PCINT9);
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	80 bd       	out	0x20, r24	; 32
	
	//TIMER0 8bit
	TCCR0A = (1 << WGM01);						// CTC MODE
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	80 bf       	out	0x30, r24	; 48
	TIMSK0 = (1 << OCIE0A);
 104:	89 bf       	out	0x39, r24	; 57
	OCR0A = 249;
 106:	89 ef       	ldi	r24, 0xF9	; 249
 108:	86 bf       	out	0x36, r24	; 54
	sei();
 10a:	78 94       	sei
    while (1) 
    {
		if(key_state_ON == 1)
		{
			TCCR0B = (1 << CS02) | (1 << CS00);		// 8000000 / 8*2*(1 + OCR0A)
 10c:	95 e0       	ldi	r25, 0x05	; 5
	TIMSK0 = (1 << OCIE0A);
	OCR0A = 249;
	sei();
    while (1) 
    {
		if(key_state_ON == 1)
 10e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <key_state_ON>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	11 f4       	brne	.+4      	; 0x11a <main+0x38>
		{
			TCCR0B = (1 << CS02) | (1 << CS00);		// 8000000 / 8*2*(1 + OCR0A)
 116:	93 bf       	out	0x33, r25	; 51
 118:	fa cf       	rjmp	.-12     	; 0x10e <main+0x2c>
		}
		else
		{
			TCCR0B = 0;								// 타이머 OFF
 11a:	13 be       	out	0x33, r1	; 51
 11c:	f8 cf       	rjmp	.-16     	; 0x10e <main+0x2c>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
