
CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000896  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000090a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000090a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000abc  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000703  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ff  00000000  00000000  00001baf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  000021b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000735  00000000  00000000  0000274a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002e7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	5a c1       	rjmp	.+692    	; 0x2bc <__vector_3>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__vector_9>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a6 36       	cpi	r26, 0x66	; 102
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	b1 d1       	rcall	.+866    	; 0x3a2 <main>
  40:	28 c4       	rjmp	.+2128   	; 0x892 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_9>:
			break;
	}
}

ISR(TIM0_COMPA_vect) 
{	
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	2f 93       	push	r18
  50:	8f 93       	push	r24
  52:	9f 93       	push	r25
	cnt++;
  54:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  58:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  62:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if(cnt >= 1499)
  66:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  6a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  6e:	8b 3d       	cpi	r24, 0xDB	; 219
  70:	95 40       	sbci	r25, 0x05	; 5
  72:	40 f0       	brcs	.+16     	; 0x84 <__vector_9+0x40>
	{
		PORTA ^= (1 << STATE_LED);
  74:	9b b3       	in	r25, 0x1b	; 27
  76:	88 e0       	ldi	r24, 0x08	; 8
  78:	89 27       	eor	r24, r25
  7a:	8b bb       	out	0x1b, r24	; 27
		cnt = 0;
  7c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  80:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
}
  84:	9f 91       	pop	r25
  86:	8f 91       	pop	r24
  88:	2f 91       	pop	r18
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <select_pow>:

void select_pow(uint8_t selection)
{
	switch(selection)
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	59 f0       	breq	.+22     	; 0xae <select_pow+0x1a>
  98:	18 f0       	brcs	.+6      	; 0xa0 <select_pow+0xc>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	79 f0       	breq	.+30     	; 0xbc <select_pow+0x28>
  9e:	08 95       	ret
	{
		case POW_LOW:
		ON_UV_LOW;
  a0:	d8 9a       	sbi	0x1b, 0	; 27
		ws2812b_show_color(1, 0, 255, 0);
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	4f ef       	ldi	r20, 0xFF	; 255
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	a6 d1       	rcall	.+844    	; 0x3f8 <ws2812b_show_color>
		break;
  ac:	08 95       	ret
		case POW_MEDIUM:
		ON_UV_MEDIUM;
  ae:	d9 9a       	sbi	0x1b, 1	; 27
		ws2812b_show_color(1, 255, 0, 0);		
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	6f ef       	ldi	r22, 0xFF	; 255
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	9f d1       	rcall	.+830    	; 0x3f8 <ws2812b_show_color>
		break;
  ba:	08 95       	ret
		case POW_HIGH:
		ON_UV_HIGH;
  bc:	da 9a       	sbi	0x1b, 2	; 27
		ws2812b_show_color(1, 0, 0, 255);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	98 d1       	rcall	.+816    	; 0x3f8 <ws2812b_show_color>
  c8:	08 95       	ret

000000ca <bz_operation>:
		break;
	}
}

void bz_operation(uint16_t hz, uint16_t count)
{
  ca:	2f 92       	push	r2
  cc:	3f 92       	push	r3
  ce:	4f 92       	push	r4
  d0:	5f 92       	push	r5
  d2:	6f 92       	push	r6
  d4:	7f 92       	push	r7
  d6:	8f 92       	push	r8
  d8:	9f 92       	push	r9
  da:	af 92       	push	r10
  dc:	bf 92       	push	r11
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	2a 97       	sbiw	r28, 0x0a	; 10
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	1b 01       	movw	r2, r22
	uint16_t i, ms, us;
	ms = 1000/(2*hz);								// 1개 펄스의 ON 또는 OFF의 ms 단위 시간
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	9a 83       	std	Y+2, r25	; 0x02
 106:	89 83       	std	Y+1, r24	; 0x01
	us = (1000.0/(2*hz) - ms) * 1000;				// 1개 펄스의 ON 또는 OFF의 us 단위 시간
 108:	bc 01       	movw	r22, r24
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	8c d2       	rcall	.+1304   	; 0x628 <__floatunsisf>
 110:	9b 01       	movw	r18, r22
 112:	ac 01       	movw	r20, r24
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	8a e7       	ldi	r24, 0x7A	; 122
 11a:	94 e4       	ldi	r25, 0x44	; 68
 11c:	f1 d1       	rcall	.+994    	; 0x500 <__divsf3>
 11e:	6b 01       	movw	r12, r22
 120:	7c 01       	movw	r14, r24
 122:	88 ee       	ldi	r24, 0xE8	; 232
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	69 81       	ldd	r22, Y+1	; 0x01
 128:	7a 81       	ldd	r23, Y+2	; 0x02
 12a:	9f d3       	rcall	.+1854   	; 0x86a <__udivmodhi4>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	7b d2       	rcall	.+1270   	; 0x628 <__floatunsisf>
 132:	9b 01       	movw	r18, r22
 134:	ac 01       	movw	r20, r24
 136:	c7 01       	movw	r24, r14
 138:	b6 01       	movw	r22, r12
 13a:	79 d1       	rcall	.+754    	; 0x42e <__subsf3>
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	4a e7       	ldi	r20, 0x7A	; 122
 142:	54 e4       	ldi	r21, 0x44	; 68
 144:	27 d3       	rcall	.+1614   	; 0x794 <__mulsf3>
 146:	44 d2       	rcall	.+1160   	; 0x5d0 <__fixunssfsi>
	for(i=0; i<count; i++)
 148:	21 14       	cp	r2, r1
 14a:	31 04       	cpc	r3, r1
 14c:	09 f4       	brne	.+2      	; 0x150 <bz_operation+0x86>
 14e:	9d c0       	rjmp	.+314    	; 0x28a <__stack+0x12b>
	{
		PORTB ^= (1 << PORTB2);						// BUzzer ON - OFF
		_delay_us(us);								// (us)us 동안 delay
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	69 d2       	rcall	.+1234   	; 0x628 <__floatunsisf>
 156:	6b 01       	movw	r12, r22
 158:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 15a:	2b ea       	ldi	r18, 0xAB	; 171
 15c:	3a ea       	ldi	r19, 0xAA	; 170
 15e:	4a e2       	ldi	r20, 0x2A	; 42
 160:	50 e4       	ldi	r21, 0x40	; 64
 162:	18 d3       	rcall	.+1584   	; 0x794 <__mulsf3>
 164:	69 83       	std	Y+1, r22	; 0x01
 166:	7a 83       	std	Y+2, r23	; 0x02
 168:	8b 83       	std	Y+3, r24	; 0x03
 16a:	9c 83       	std	Y+4, r25	; 0x04
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 16c:	31 d2       	rcall	.+1122   	; 0x5d0 <__fixunssfsi>
 16e:	1e 82       	std	Y+6, r1	; 0x06
 170:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t i, ms, us;
	ms = 1000/(2*hz);								// 1개 펄스의 ON 또는 OFF의 ms 단위 시간
	us = (1000.0/(2*hz) - ms) * 1000;				// 1개 펄스의 ON 또는 OFF의 us 단위 시간
	for(i=0; i<count; i++)
	{
		PORTB ^= (1 << PORTB2);						// BUzzer ON - OFF
 172:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 174:	55 24       	eor	r5, r5
 176:	53 94       	inc	r5
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 178:	46 2e       	mov	r4, r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17a:	0f 2e       	mov	r0, r31
 17c:	f8 ec       	ldi	r31, 0xC8	; 200
 17e:	6f 2e       	mov	r6, r31
 180:	71 2c       	mov	r7, r1
 182:	f0 2d       	mov	r31, r0
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	3a 87       	std	Y+10, r19	; 0x0a
 18a:	29 87       	std	Y+9, r18	; 0x09
 18c:	88 b3       	in	r24, 0x18	; 24
 18e:	81 27       	eor	r24, r17
 190:	88 bb       	out	0x18, r24	; 24
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	40 e8       	ldi	r20, 0x80	; 128
 198:	5f e3       	ldi	r21, 0x3F	; 63
 19a:	69 81       	ldd	r22, Y+1	; 0x01
 19c:	7a 81       	ldd	r23, Y+2	; 0x02
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	9c 81       	ldd	r25, Y+4	; 0x04
 1a2:	aa d1       	rcall	.+852    	; 0x4f8 <__cmpsf2>
 1a4:	88 23       	and	r24, r24
 1a6:	0c f4       	brge	.+2      	; 0x1aa <__stack+0x4b>
 1a8:	61 c0       	rjmp	.+194    	; 0x26c <__stack+0x10d>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 1aa:	a7 01       	movw	r20, r14
 1ac:	96 01       	movw	r18, r12
 1ae:	c7 01       	movw	r24, r14
 1b0:	b6 01       	movw	r22, r12
 1b2:	3e d1       	rcall	.+636    	; 0x430 <__addsf3>
 1b4:	4b 01       	movw	r8, r22
 1b6:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	3f ef       	ldi	r19, 0xFF	; 255
 1bc:	4f e7       	ldi	r20, 0x7F	; 127
 1be:	57 e4       	ldi	r21, 0x47	; 71
 1c0:	e5 d2       	rcall	.+1482   	; 0x78c <__gesf2>
 1c2:	18 16       	cp	r1, r24
 1c4:	0c f0       	brlt	.+2      	; 0x1c8 <__stack+0x69>
 1c6:	40 c0       	rjmp	.+128    	; 0x248 <__stack+0xe9>
	{
		_delay_ms(__us / 1000.0);
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	4a e7       	ldi	r20, 0x7A	; 122
 1ce:	54 e4       	ldi	r21, 0x44	; 68
 1d0:	c7 01       	movw	r24, r14
 1d2:	b6 01       	movw	r22, r12
 1d4:	95 d1       	rcall	.+810    	; 0x500 <__divsf3>
 1d6:	6d 83       	std	Y+5, r22	; 0x05
 1d8:	7e 83       	std	Y+6, r23	; 0x06
 1da:	8f 83       	std	Y+7, r24	; 0x07
 1dc:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	4a ef       	ldi	r20, 0xFA	; 250
 1e4:	54 e4       	ldi	r21, 0x44	; 68
 1e6:	d6 d2       	rcall	.+1452   	; 0x794 <__mulsf3>
 1e8:	4b 01       	movw	r8, r22
 1ea:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 e8       	ldi	r20, 0x80	; 128
 1f2:	5f e3       	ldi	r21, 0x3F	; 63
 1f4:	81 d1       	rcall	.+770    	; 0x4f8 <__cmpsf2>
 1f6:	88 23       	and	r24, r24
 1f8:	0c f1       	brlt	.+66     	; 0x23c <__stack+0xdd>
		__ticks = 1;
	else if (__tmp > 65535)
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	3f ef       	ldi	r19, 0xFF	; 255
 1fe:	4f e7       	ldi	r20, 0x7F	; 127
 200:	57 e4       	ldi	r21, 0x47	; 71
 202:	c5 01       	movw	r24, r10
 204:	b4 01       	movw	r22, r8
 206:	c2 d2       	rcall	.+1412   	; 0x78c <__gesf2>
 208:	18 16       	cp	r1, r24
 20a:	a4 f4       	brge	.+40     	; 0x234 <__stack+0xd5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 20c:	20 e0       	ldi	r18, 0x00	; 0
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e2       	ldi	r20, 0x20	; 32
 212:	51 e4       	ldi	r21, 0x41	; 65
 214:	6d 81       	ldd	r22, Y+5	; 0x05
 216:	7e 81       	ldd	r23, Y+6	; 0x06
 218:	8f 81       	ldd	r24, Y+7	; 0x07
 21a:	98 85       	ldd	r25, Y+8	; 0x08
 21c:	bb d2       	rcall	.+1398   	; 0x794 <__mulsf3>
 21e:	d8 d1       	rcall	.+944    	; 0x5d0 <__fixunssfsi>
		while(__ticks)
 220:	61 15       	cp	r22, r1
 222:	71 05       	cpc	r23, r1
 224:	31 f1       	breq	.+76     	; 0x272 <__stack+0x113>
 226:	c3 01       	movw	r24, r6
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <__stack+0xc9>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22c:	61 50       	subi	r22, 0x01	; 1
 22e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 230:	d1 f7       	brne	.-12     	; 0x226 <__stack+0xc7>
 232:	1f c0       	rjmp	.+62     	; 0x272 <__stack+0x113>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 234:	c5 01       	movw	r24, r10
 236:	b4 01       	movw	r22, r8
 238:	cb d1       	rcall	.+918    	; 0x5d0 <__fixunssfsi>
 23a:	02 c0       	rjmp	.+4      	; 0x240 <__stack+0xe1>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	cb 01       	movw	r24, r22
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <__stack+0xe3>
 246:	15 c0       	rjmp	.+42     	; 0x272 <__stack+0x113>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	4f e7       	ldi	r20, 0x7F	; 127
 24e:	53 e4       	ldi	r21, 0x43	; 67
 250:	69 81       	ldd	r22, Y+1	; 0x01
 252:	7a 81       	ldd	r23, Y+2	; 0x02
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	9c 81       	ldd	r25, Y+4	; 0x04
 258:	99 d2       	rcall	.+1330   	; 0x78c <__gesf2>
 25a:	18 16       	cp	r1, r24
 25c:	4c f4       	brge	.+18     	; 0x270 <__stack+0x111>
 25e:	c5 01       	movw	r24, r10
 260:	b4 01       	movw	r22, r8
 262:	b6 d1       	rcall	.+876    	; 0x5d0 <__fixunssfsi>
 264:	cb 01       	movw	r24, r22
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <__stack+0x107>
 26a:	06 c0       	rjmp	.+12     	; 0x278 <__stack+0x119>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 26c:	05 2d       	mov	r16, r5
 26e:	01 c0       	rjmp	.+2      	; 0x272 <__stack+0x113>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 270:	04 2d       	mov	r16, r4
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 272:	80 2f       	mov	r24, r16
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <__stack+0x115>
void bz_operation(uint16_t hz, uint16_t count)
{
	uint16_t i, ms, us;
	ms = 1000/(2*hz);								// 1개 펄스의 ON 또는 OFF의 ms 단위 시간
	us = (1000.0/(2*hz) - ms) * 1000;				// 1개 펄스의 ON 또는 OFF의 us 단위 시간
	for(i=0; i<count; i++)
 278:	89 85       	ldd	r24, Y+9	; 0x09
 27a:	9a 85       	ldd	r25, Y+10	; 0x0a
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	9a 87       	std	Y+10, r25	; 0x0a
 280:	89 87       	std	Y+9, r24	; 0x09
 282:	28 16       	cp	r2, r24
 284:	39 06       	cpc	r3, r25
 286:	09 f0       	breq	.+2      	; 0x28a <__stack+0x12b>
 288:	81 cf       	rjmp	.-254    	; 0x18c <__stack+0x2d>
	{
		PORTB ^= (1 << PORTB2);						// BUzzer ON - OFF
		_delay_us(us);								// (us)us 동안 delay
	}
}
 28a:	2a 96       	adiw	r28, 0x0a	; 10
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	cf 90       	pop	r12
 2a6:	bf 90       	pop	r11
 2a8:	af 90       	pop	r10
 2aa:	9f 90       	pop	r9
 2ac:	8f 90       	pop	r8
 2ae:	7f 90       	pop	r7
 2b0:	6f 90       	pop	r6
 2b2:	5f 90       	pop	r5
 2b4:	4f 90       	pop	r4
 2b6:	3f 90       	pop	r3
 2b8:	2f 90       	pop	r2
 2ba:	08 95       	ret

000002bc <__vector_3>:
void select_pow(uint8_t selection);
void UV_util_init(void);
void bz_operation(uint16_t hz, uint16_t count);

ISR(PCINT1_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	uint8_t check_pin = PINB & 0x03;				// PCINT8, PCINT9 check (PB0, PB1)
 2de:	86 b3       	in	r24, 0x16	; 22
// 	_delay_ms(100);									// debounce (if use cap(up to 100nF), remove this)
	switch(check_pin)
 2e0:	83 70       	andi	r24, 0x03	; 3
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	a9 f0       	breq	.+42     	; 0x310 <__vector_3+0x54>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	71 f5       	brne	.+92     	; 0x346 <__vector_3+0x8a>
	{
		case TOUCH_FLAG_ON:							// PCINT9(PB1) Clicked
			if(key_flag_ON == 0)
 2ea:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <key_flag_ON>
 2ee:	81 11       	cpse	r24, r1
 2f0:	2e c0       	rjmp	.+92     	; 0x34e <__vector_3+0x92>
			{
				key_flag_ON = 1;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <key_flag_ON>
				state_ON = !state_ON;
 2f8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <state_ON>
 2fc:	91 11       	cpse	r25, r1
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <state_ON>
				bz_operation(1047, 150);
 304:	66 e9       	ldi	r22, 0x96	; 150
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	87 e1       	ldi	r24, 0x17	; 23
 30a:	94 e0       	ldi	r25, 0x04	; 4
 30c:	de de       	rcall	.-580    	; 0xca <bz_operation>
 30e:	1f c0       	rjmp	.+62     	; 0x34e <__vector_3+0x92>
			}
			break;
		case TOUCH_FLAG_POW:						// PCINT8(PB0) Clicked
			if(!key_flag_Power)
 310:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <key_flag_Power>
 314:	81 11       	cpse	r24, r1
 316:	1b c0       	rjmp	.+54     	; 0x34e <__vector_3+0x92>
			{
				key_flag_Power = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <key_flag_Power>
				state_Power++;
 31e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <state_Power>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <state_Power>
				if(state_Power>2)
 328:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <state_Power>
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	10 f0       	brcs	.+4      	; 0x334 <__vector_3+0x78>
				{
					state_Power=0;
 330:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <state_Power>
				}
				select_pow(state_Power);
 334:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <state_Power>
 338:	ad de       	rcall	.-678    	; 0x94 <select_pow>
				bz_operation(1047, 150);
 33a:	66 e9       	ldi	r22, 0x96	; 150
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	87 e1       	ldi	r24, 0x17	; 23
 340:	94 e0       	ldi	r25, 0x04	; 4
 342:	c3 de       	rcall	.-634    	; 0xca <bz_operation>
 344:	04 c0       	rjmp	.+8      	; 0x34e <__vector_3+0x92>
			}
			break;
		default:									// key_flag init
			key_flag_ON = 0;
 346:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <key_flag_ON>
			key_flag_Power = 0;
 34a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <key_flag_Power>
			break;
	}
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <UV_util_init>:
}

void UV_util_init(void)
{
	// OUTPUT init
	DDRA |=	(1 << PORTA0) | (1 << PORTA1) | (1 << PORTA2) | (1 << PORTA3) | (1 << PORTA7);
 370:	8a b3       	in	r24, 0x1a	; 26
 372:	8f 68       	ori	r24, 0x8F	; 143
 374:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1 << PORTB2);
 376:	ba 9a       	sbi	0x17, 2	; 23

	// PIN Change Interrupt
	GIMSK = (1 << PCIE1);
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	8b bf       	out	0x3b, r24	; 59
	GIFR = (1 << PCIF1);
 37c:	8a bf       	out	0x3a, r24	; 58
	PCMSK1 = (1 << PCINT8) | (1 << PCINT9);
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	80 bd       	out	0x20, r24	; 32
	
	// TIMER0 8bit
	TCCR0A = (1 << WGM01);						// CTC MODE
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	80 bf       	out	0x30, r24	; 48
	TIMSK0 = (1 << OCIE0A);						// TIM0 COMP INT Enable
 386:	89 bf       	out	0x39, r24	; 57
	OCR0A = 249;								// F_CPU/(2*Prescale*(1+249))
 388:	89 ef       	ldi	r24, 0xF9	; 249
 38a:	86 bf       	out	0x36, r24	; 54

	ws2812b_init();
 38c:	26 d0       	rcall	.+76     	; 0x3da <ws2812b_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 38e:	80 e2       	ldi	r24, 0x20	; 32
 390:	9e e4       	ldi	r25, 0x4E	; 78
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <UV_util_init+0x22>
	_delay_ms(10);
	ws2812b_show_color(1, 0, 255, 0);
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	4f ef       	ldi	r20, 0xFF	; 255
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	2c d0       	rcall	.+88     	; 0x3f8 <ws2812b_show_color>
 3a0:	08 95       	ret

000003a2 <main>:
}

int main(void)
{
	UV_util_init();
 3a2:	e6 df       	rcall	.-52     	; 0x370 <UV_util_init>
	sei();
 3a4:	78 94       	sei
			ON_STATE;							// 상태 LED ON
			TCCR0B = 0;							// 타이머 OFF		
		}
		else
		{
			TCCR0B = (1 << CS01);				// 타이머 ON
 3a6:	92 e0       	ldi	r25, 0x02	; 2
	UV_util_init();
	sei();
	
    while (1) 
    {
		if(state_ON == 0)
 3a8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <state_ON>
 3ac:	81 11       	cpse	r24, r1
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <main+0x14>
		{
			ON_STATE;							// 상태 LED ON
 3b0:	db 9a       	sbi	0x1b, 3	; 27
			TCCR0B = 0;							// 타이머 OFF		
 3b2:	13 be       	out	0x33, r1	; 51
 3b4:	f9 cf       	rjmp	.-14     	; 0x3a8 <main+0x6>
		}
		else
		{
			TCCR0B = (1 << CS01);				// 타이머 ON
 3b6:	93 bf       	out	0x33, r25	; 51
 3b8:	f7 cf       	rjmp	.-18     	; 0x3a8 <main+0x6>

000003ba <ws2812b_op>:
		ws2812b_op(0);
	}
}

void ws2812b_op(char scan)
{
 3ba:	98 e0       	ldi	r25, 0x08	; 8
	char i;
	for(i=0; i<8; i++)
	{
		if(scan & 0x80)
 3bc:	88 23       	and	r24, r24
 3be:	34 f4       	brge	.+12     	; 0x3cc <ws2812b_op+0x12>
		{
			PORTA |= (1 << PORTA7);
 3c0:	df 9a       	sbi	0x1b, 7	; 27
			nop3;
 3c2:	00 00       	nop
 3c4:	00 00       	nop
 3c6:	00 00       	nop
			PORTA &= ~(1 << PORTA7);
 3c8:	df 98       	cbi	0x1b, 7	; 27
 3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <ws2812b_op+0x18>
		}
		else
		{
			PORTA |= (1 << PORTA7);
 3cc:	df 9a       	sbi	0x1b, 7	; 27
			nop;
 3ce:	00 00       	nop
			PORTA &= ~(1 << PORTA7);
 3d0:	df 98       	cbi	0x1b, 7	; 27
		}
		scan <<= 1;
 3d2:	88 0f       	add	r24, r24
 3d4:	91 50       	subi	r25, 0x01	; 1
}

void ws2812b_op(char scan)
{
	char i;
	for(i=0; i<8; i++)
 3d6:	91 f7       	brne	.-28     	; 0x3bc <ws2812b_op+0x2>
			nop;
			PORTA &= ~(1 << PORTA7);
		}
		scan <<= 1;
	}
}
 3d8:	08 95       	ret

000003da <ws2812b_init>:

#include <avr/io.h>
#include "ws2812b.h"

void ws2812b_init(void)
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	c3 e0       	ldi	r28, 0x03	; 3
 3e0:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0; i<ws2812b_NUM; i++)
	{
		ws2812b_op(0);
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	ea df       	rcall	.-44     	; 0x3ba <ws2812b_op>
		ws2812b_op(0);
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	e8 df       	rcall	.-48     	; 0x3ba <ws2812b_op>
		ws2812b_op(0);
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	e6 df       	rcall	.-52     	; 0x3ba <ws2812b_op>
 3ee:	21 97       	sbiw	r28, 0x01	; 1
#include <avr/io.h>
#include "ws2812b.h"

void ws2812b_init(void)
{
	for(int i=0; i<ws2812b_NUM; i++)
 3f0:	c1 f7       	brne	.-16     	; 0x3e2 <ws2812b_init+0x8>
	{
		ws2812b_op(0);
		ws2812b_op(0);
		ws2812b_op(0);
	}
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <ws2812b_show_color>:
		scan <<= 1;
	}
}

void ws2812b_show_color(char num, char green, char red, char blue)
{
 3f8:	ff 92       	push	r15
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
	for(char i=0; i<num; i++)
 402:	88 23       	and	r24, r24
 404:	71 f0       	breq	.+28     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 406:	f2 2e       	mov	r15, r18
 408:	04 2f       	mov	r16, r20
 40a:	16 2f       	mov	r17, r22
 40c:	d8 2f       	mov	r29, r24
 40e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		ws2812b_op(green);
 410:	81 2f       	mov	r24, r17
 412:	d3 df       	rcall	.-90     	; 0x3ba <ws2812b_op>
		ws2812b_op(red);
 414:	80 2f       	mov	r24, r16
 416:	d1 df       	rcall	.-94     	; 0x3ba <ws2812b_op>
		ws2812b_op(blue);
 418:	8f 2d       	mov	r24, r15
 41a:	cf df       	rcall	.-98     	; 0x3ba <ws2812b_op>
	}
}

void ws2812b_show_color(char num, char green, char red, char blue)
{
	for(char i=0; i<num; i++)
 41c:	cf 5f       	subi	r28, 0xFF	; 255
 41e:	dc 13       	cpse	r29, r28
 420:	f7 cf       	rjmp	.-18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	{
		ws2812b_op(green);
		ws2812b_op(red);
		ws2812b_op(blue);
	}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	ff 90       	pop	r15
 42c:	08 95       	ret

0000042e <__subsf3>:
 42e:	50 58       	subi	r21, 0x80	; 128

00000430 <__addsf3>:
 430:	bb 27       	eor	r27, r27
 432:	aa 27       	eor	r26, r26
 434:	0e d0       	rcall	.+28     	; 0x452 <__addsf3x>
 436:	70 c1       	rjmp	.+736    	; 0x718 <__fp_round>
 438:	61 d1       	rcall	.+706    	; 0x6fc <__fp_pscA>
 43a:	30 f0       	brcs	.+12     	; 0x448 <__addsf3+0x18>
 43c:	66 d1       	rcall	.+716    	; 0x70a <__fp_pscB>
 43e:	20 f0       	brcs	.+8      	; 0x448 <__addsf3+0x18>
 440:	31 f4       	brne	.+12     	; 0x44e <__addsf3+0x1e>
 442:	9f 3f       	cpi	r25, 0xFF	; 255
 444:	11 f4       	brne	.+4      	; 0x44a <__addsf3+0x1a>
 446:	1e f4       	brtc	.+6      	; 0x44e <__addsf3+0x1e>
 448:	56 c1       	rjmp	.+684    	; 0x6f6 <__fp_nan>
 44a:	0e f4       	brtc	.+2      	; 0x44e <__addsf3+0x1e>
 44c:	e0 95       	com	r30
 44e:	e7 fb       	bst	r30, 7
 450:	4c c1       	rjmp	.+664    	; 0x6ea <__fp_inf>

00000452 <__addsf3x>:
 452:	e9 2f       	mov	r30, r25
 454:	72 d1       	rcall	.+740    	; 0x73a <__fp_split3>
 456:	80 f3       	brcs	.-32     	; 0x438 <__addsf3+0x8>
 458:	ba 17       	cp	r27, r26
 45a:	62 07       	cpc	r22, r18
 45c:	73 07       	cpc	r23, r19
 45e:	84 07       	cpc	r24, r20
 460:	95 07       	cpc	r25, r21
 462:	18 f0       	brcs	.+6      	; 0x46a <__addsf3x+0x18>
 464:	71 f4       	brne	.+28     	; 0x482 <__addsf3x+0x30>
 466:	9e f5       	brtc	.+102    	; 0x4ce <__addsf3x+0x7c>
 468:	8a c1       	rjmp	.+788    	; 0x77e <__fp_zero>
 46a:	0e f4       	brtc	.+2      	; 0x46e <__addsf3x+0x1c>
 46c:	e0 95       	com	r30
 46e:	0b 2e       	mov	r0, r27
 470:	ba 2f       	mov	r27, r26
 472:	a0 2d       	mov	r26, r0
 474:	0b 01       	movw	r0, r22
 476:	b9 01       	movw	r22, r18
 478:	90 01       	movw	r18, r0
 47a:	0c 01       	movw	r0, r24
 47c:	ca 01       	movw	r24, r20
 47e:	a0 01       	movw	r20, r0
 480:	11 24       	eor	r1, r1
 482:	ff 27       	eor	r31, r31
 484:	59 1b       	sub	r21, r25
 486:	99 f0       	breq	.+38     	; 0x4ae <__addsf3x+0x5c>
 488:	59 3f       	cpi	r21, 0xF9	; 249
 48a:	50 f4       	brcc	.+20     	; 0x4a0 <__addsf3x+0x4e>
 48c:	50 3e       	cpi	r21, 0xE0	; 224
 48e:	68 f1       	brcs	.+90     	; 0x4ea <__addsf3x+0x98>
 490:	1a 16       	cp	r1, r26
 492:	f0 40       	sbci	r31, 0x00	; 0
 494:	a2 2f       	mov	r26, r18
 496:	23 2f       	mov	r18, r19
 498:	34 2f       	mov	r19, r20
 49a:	44 27       	eor	r20, r20
 49c:	58 5f       	subi	r21, 0xF8	; 248
 49e:	f3 cf       	rjmp	.-26     	; 0x486 <__addsf3x+0x34>
 4a0:	46 95       	lsr	r20
 4a2:	37 95       	ror	r19
 4a4:	27 95       	ror	r18
 4a6:	a7 95       	ror	r26
 4a8:	f0 40       	sbci	r31, 0x00	; 0
 4aa:	53 95       	inc	r21
 4ac:	c9 f7       	brne	.-14     	; 0x4a0 <__addsf3x+0x4e>
 4ae:	7e f4       	brtc	.+30     	; 0x4ce <__addsf3x+0x7c>
 4b0:	1f 16       	cp	r1, r31
 4b2:	ba 0b       	sbc	r27, r26
 4b4:	62 0b       	sbc	r22, r18
 4b6:	73 0b       	sbc	r23, r19
 4b8:	84 0b       	sbc	r24, r20
 4ba:	ba f0       	brmi	.+46     	; 0x4ea <__addsf3x+0x98>
 4bc:	91 50       	subi	r25, 0x01	; 1
 4be:	a1 f0       	breq	.+40     	; 0x4e8 <__addsf3x+0x96>
 4c0:	ff 0f       	add	r31, r31
 4c2:	bb 1f       	adc	r27, r27
 4c4:	66 1f       	adc	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	c2 f7       	brpl	.-16     	; 0x4bc <__addsf3x+0x6a>
 4cc:	0e c0       	rjmp	.+28     	; 0x4ea <__addsf3x+0x98>
 4ce:	ba 0f       	add	r27, r26
 4d0:	62 1f       	adc	r22, r18
 4d2:	73 1f       	adc	r23, r19
 4d4:	84 1f       	adc	r24, r20
 4d6:	48 f4       	brcc	.+18     	; 0x4ea <__addsf3x+0x98>
 4d8:	87 95       	ror	r24
 4da:	77 95       	ror	r23
 4dc:	67 95       	ror	r22
 4de:	b7 95       	ror	r27
 4e0:	f7 95       	ror	r31
 4e2:	9e 3f       	cpi	r25, 0xFE	; 254
 4e4:	08 f0       	brcs	.+2      	; 0x4e8 <__addsf3x+0x96>
 4e6:	b3 cf       	rjmp	.-154    	; 0x44e <__addsf3+0x1e>
 4e8:	93 95       	inc	r25
 4ea:	88 0f       	add	r24, r24
 4ec:	08 f0       	brcs	.+2      	; 0x4f0 <__addsf3x+0x9e>
 4ee:	99 27       	eor	r25, r25
 4f0:	ee 0f       	add	r30, r30
 4f2:	97 95       	ror	r25
 4f4:	87 95       	ror	r24
 4f6:	08 95       	ret

000004f8 <__cmpsf2>:
 4f8:	d4 d0       	rcall	.+424    	; 0x6a2 <__fp_cmp>
 4fa:	08 f4       	brcc	.+2      	; 0x4fe <__cmpsf2+0x6>
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	08 95       	ret

00000500 <__divsf3>:
 500:	0c d0       	rcall	.+24     	; 0x51a <__divsf3x>
 502:	0a c1       	rjmp	.+532    	; 0x718 <__fp_round>
 504:	02 d1       	rcall	.+516    	; 0x70a <__fp_pscB>
 506:	40 f0       	brcs	.+16     	; 0x518 <__divsf3+0x18>
 508:	f9 d0       	rcall	.+498    	; 0x6fc <__fp_pscA>
 50a:	30 f0       	brcs	.+12     	; 0x518 <__divsf3+0x18>
 50c:	21 f4       	brne	.+8      	; 0x516 <__divsf3+0x16>
 50e:	5f 3f       	cpi	r21, 0xFF	; 255
 510:	19 f0       	breq	.+6      	; 0x518 <__divsf3+0x18>
 512:	eb c0       	rjmp	.+470    	; 0x6ea <__fp_inf>
 514:	51 11       	cpse	r21, r1
 516:	34 c1       	rjmp	.+616    	; 0x780 <__fp_szero>
 518:	ee c0       	rjmp	.+476    	; 0x6f6 <__fp_nan>

0000051a <__divsf3x>:
 51a:	0f d1       	rcall	.+542    	; 0x73a <__fp_split3>
 51c:	98 f3       	brcs	.-26     	; 0x504 <__divsf3+0x4>

0000051e <__divsf3_pse>:
 51e:	99 23       	and	r25, r25
 520:	c9 f3       	breq	.-14     	; 0x514 <__divsf3+0x14>
 522:	55 23       	and	r21, r21
 524:	b1 f3       	breq	.-20     	; 0x512 <__divsf3+0x12>
 526:	95 1b       	sub	r25, r21
 528:	55 0b       	sbc	r21, r21
 52a:	bb 27       	eor	r27, r27
 52c:	aa 27       	eor	r26, r26
 52e:	62 17       	cp	r22, r18
 530:	73 07       	cpc	r23, r19
 532:	84 07       	cpc	r24, r20
 534:	38 f0       	brcs	.+14     	; 0x544 <__divsf3_pse+0x26>
 536:	9f 5f       	subi	r25, 0xFF	; 255
 538:	5f 4f       	sbci	r21, 0xFF	; 255
 53a:	22 0f       	add	r18, r18
 53c:	33 1f       	adc	r19, r19
 53e:	44 1f       	adc	r20, r20
 540:	aa 1f       	adc	r26, r26
 542:	a9 f3       	breq	.-22     	; 0x52e <__divsf3_pse+0x10>
 544:	33 d0       	rcall	.+102    	; 0x5ac <__divsf3_pse+0x8e>
 546:	0e 2e       	mov	r0, r30
 548:	3a f0       	brmi	.+14     	; 0x558 <__divsf3_pse+0x3a>
 54a:	e0 e8       	ldi	r30, 0x80	; 128
 54c:	30 d0       	rcall	.+96     	; 0x5ae <__divsf3_pse+0x90>
 54e:	91 50       	subi	r25, 0x01	; 1
 550:	50 40       	sbci	r21, 0x00	; 0
 552:	e6 95       	lsr	r30
 554:	00 1c       	adc	r0, r0
 556:	ca f7       	brpl	.-14     	; 0x54a <__divsf3_pse+0x2c>
 558:	29 d0       	rcall	.+82     	; 0x5ac <__divsf3_pse+0x8e>
 55a:	fe 2f       	mov	r31, r30
 55c:	27 d0       	rcall	.+78     	; 0x5ac <__divsf3_pse+0x8e>
 55e:	66 0f       	add	r22, r22
 560:	77 1f       	adc	r23, r23
 562:	88 1f       	adc	r24, r24
 564:	bb 1f       	adc	r27, r27
 566:	26 17       	cp	r18, r22
 568:	37 07       	cpc	r19, r23
 56a:	48 07       	cpc	r20, r24
 56c:	ab 07       	cpc	r26, r27
 56e:	b0 e8       	ldi	r27, 0x80	; 128
 570:	09 f0       	breq	.+2      	; 0x574 <__divsf3_pse+0x56>
 572:	bb 0b       	sbc	r27, r27
 574:	80 2d       	mov	r24, r0
 576:	bf 01       	movw	r22, r30
 578:	ff 27       	eor	r31, r31
 57a:	93 58       	subi	r25, 0x83	; 131
 57c:	5f 4f       	sbci	r21, 0xFF	; 255
 57e:	2a f0       	brmi	.+10     	; 0x58a <__divsf3_pse+0x6c>
 580:	9e 3f       	cpi	r25, 0xFE	; 254
 582:	51 05       	cpc	r21, r1
 584:	68 f0       	brcs	.+26     	; 0x5a0 <__divsf3_pse+0x82>
 586:	b1 c0       	rjmp	.+354    	; 0x6ea <__fp_inf>
 588:	fb c0       	rjmp	.+502    	; 0x780 <__fp_szero>
 58a:	5f 3f       	cpi	r21, 0xFF	; 255
 58c:	ec f3       	brlt	.-6      	; 0x588 <__divsf3_pse+0x6a>
 58e:	98 3e       	cpi	r25, 0xE8	; 232
 590:	dc f3       	brlt	.-10     	; 0x588 <__divsf3_pse+0x6a>
 592:	86 95       	lsr	r24
 594:	77 95       	ror	r23
 596:	67 95       	ror	r22
 598:	b7 95       	ror	r27
 59a:	f7 95       	ror	r31
 59c:	9f 5f       	subi	r25, 0xFF	; 255
 59e:	c9 f7       	brne	.-14     	; 0x592 <__divsf3_pse+0x74>
 5a0:	88 0f       	add	r24, r24
 5a2:	91 1d       	adc	r25, r1
 5a4:	96 95       	lsr	r25
 5a6:	87 95       	ror	r24
 5a8:	97 f9       	bld	r25, 7
 5aa:	08 95       	ret
 5ac:	e1 e0       	ldi	r30, 0x01	; 1
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	bb 1f       	adc	r27, r27
 5b6:	62 17       	cp	r22, r18
 5b8:	73 07       	cpc	r23, r19
 5ba:	84 07       	cpc	r24, r20
 5bc:	ba 07       	cpc	r27, r26
 5be:	20 f0       	brcs	.+8      	; 0x5c8 <__divsf3_pse+0xaa>
 5c0:	62 1b       	sub	r22, r18
 5c2:	73 0b       	sbc	r23, r19
 5c4:	84 0b       	sbc	r24, r20
 5c6:	ba 0b       	sbc	r27, r26
 5c8:	ee 1f       	adc	r30, r30
 5ca:	88 f7       	brcc	.-30     	; 0x5ae <__divsf3_pse+0x90>
 5cc:	e0 95       	com	r30
 5ce:	08 95       	ret

000005d0 <__fixunssfsi>:
 5d0:	bc d0       	rcall	.+376    	; 0x74a <__fp_splitA>
 5d2:	88 f0       	brcs	.+34     	; 0x5f6 <__fixunssfsi+0x26>
 5d4:	9f 57       	subi	r25, 0x7F	; 127
 5d6:	90 f0       	brcs	.+36     	; 0x5fc <__fixunssfsi+0x2c>
 5d8:	b9 2f       	mov	r27, r25
 5da:	99 27       	eor	r25, r25
 5dc:	b7 51       	subi	r27, 0x17	; 23
 5de:	a0 f0       	brcs	.+40     	; 0x608 <__fixunssfsi+0x38>
 5e0:	d1 f0       	breq	.+52     	; 0x616 <__fixunssfsi+0x46>
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	1a f0       	brmi	.+6      	; 0x5f2 <__fixunssfsi+0x22>
 5ec:	ba 95       	dec	r27
 5ee:	c9 f7       	brne	.-14     	; 0x5e2 <__fixunssfsi+0x12>
 5f0:	12 c0       	rjmp	.+36     	; 0x616 <__fixunssfsi+0x46>
 5f2:	b1 30       	cpi	r27, 0x01	; 1
 5f4:	81 f0       	breq	.+32     	; 0x616 <__fixunssfsi+0x46>
 5f6:	c3 d0       	rcall	.+390    	; 0x77e <__fp_zero>
 5f8:	b1 e0       	ldi	r27, 0x01	; 1
 5fa:	08 95       	ret
 5fc:	c0 c0       	rjmp	.+384    	; 0x77e <__fp_zero>
 5fe:	67 2f       	mov	r22, r23
 600:	78 2f       	mov	r23, r24
 602:	88 27       	eor	r24, r24
 604:	b8 5f       	subi	r27, 0xF8	; 248
 606:	39 f0       	breq	.+14     	; 0x616 <__fixunssfsi+0x46>
 608:	b9 3f       	cpi	r27, 0xF9	; 249
 60a:	cc f3       	brlt	.-14     	; 0x5fe <__fixunssfsi+0x2e>
 60c:	86 95       	lsr	r24
 60e:	77 95       	ror	r23
 610:	67 95       	ror	r22
 612:	b3 95       	inc	r27
 614:	d9 f7       	brne	.-10     	; 0x60c <__fixunssfsi+0x3c>
 616:	3e f4       	brtc	.+14     	; 0x626 <__fixunssfsi+0x56>
 618:	90 95       	com	r25
 61a:	80 95       	com	r24
 61c:	70 95       	com	r23
 61e:	61 95       	neg	r22
 620:	7f 4f       	sbci	r23, 0xFF	; 255
 622:	8f 4f       	sbci	r24, 0xFF	; 255
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	08 95       	ret

00000628 <__floatunsisf>:
 628:	e8 94       	clt
 62a:	09 c0       	rjmp	.+18     	; 0x63e <__floatsisf+0x12>

0000062c <__floatsisf>:
 62c:	97 fb       	bst	r25, 7
 62e:	3e f4       	brtc	.+14     	; 0x63e <__floatsisf+0x12>
 630:	90 95       	com	r25
 632:	80 95       	com	r24
 634:	70 95       	com	r23
 636:	61 95       	neg	r22
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	99 23       	and	r25, r25
 640:	a9 f0       	breq	.+42     	; 0x66c <__floatsisf+0x40>
 642:	f9 2f       	mov	r31, r25
 644:	96 e9       	ldi	r25, 0x96	; 150
 646:	bb 27       	eor	r27, r27
 648:	93 95       	inc	r25
 64a:	f6 95       	lsr	r31
 64c:	87 95       	ror	r24
 64e:	77 95       	ror	r23
 650:	67 95       	ror	r22
 652:	b7 95       	ror	r27
 654:	f1 11       	cpse	r31, r1
 656:	f8 cf       	rjmp	.-16     	; 0x648 <__floatsisf+0x1c>
 658:	fa f4       	brpl	.+62     	; 0x698 <__floatsisf+0x6c>
 65a:	bb 0f       	add	r27, r27
 65c:	11 f4       	brne	.+4      	; 0x662 <__floatsisf+0x36>
 65e:	60 ff       	sbrs	r22, 0
 660:	1b c0       	rjmp	.+54     	; 0x698 <__floatsisf+0x6c>
 662:	6f 5f       	subi	r22, 0xFF	; 255
 664:	7f 4f       	sbci	r23, 0xFF	; 255
 666:	8f 4f       	sbci	r24, 0xFF	; 255
 668:	9f 4f       	sbci	r25, 0xFF	; 255
 66a:	16 c0       	rjmp	.+44     	; 0x698 <__floatsisf+0x6c>
 66c:	88 23       	and	r24, r24
 66e:	11 f0       	breq	.+4      	; 0x674 <__floatsisf+0x48>
 670:	96 e9       	ldi	r25, 0x96	; 150
 672:	11 c0       	rjmp	.+34     	; 0x696 <__floatsisf+0x6a>
 674:	77 23       	and	r23, r23
 676:	21 f0       	breq	.+8      	; 0x680 <__floatsisf+0x54>
 678:	9e e8       	ldi	r25, 0x8E	; 142
 67a:	87 2f       	mov	r24, r23
 67c:	76 2f       	mov	r23, r22
 67e:	05 c0       	rjmp	.+10     	; 0x68a <__floatsisf+0x5e>
 680:	66 23       	and	r22, r22
 682:	71 f0       	breq	.+28     	; 0x6a0 <__floatsisf+0x74>
 684:	96 e8       	ldi	r25, 0x86	; 134
 686:	86 2f       	mov	r24, r22
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	2a f0       	brmi	.+10     	; 0x698 <__floatsisf+0x6c>
 68e:	9a 95       	dec	r25
 690:	66 0f       	add	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	88 1f       	adc	r24, r24
 696:	da f7       	brpl	.-10     	; 0x68e <__floatsisf+0x62>
 698:	88 0f       	add	r24, r24
 69a:	96 95       	lsr	r25
 69c:	87 95       	ror	r24
 69e:	97 f9       	bld	r25, 7
 6a0:	08 95       	ret

000006a2 <__fp_cmp>:
 6a2:	99 0f       	add	r25, r25
 6a4:	00 08       	sbc	r0, r0
 6a6:	55 0f       	add	r21, r21
 6a8:	aa 0b       	sbc	r26, r26
 6aa:	e0 e8       	ldi	r30, 0x80	; 128
 6ac:	fe ef       	ldi	r31, 0xFE	; 254
 6ae:	16 16       	cp	r1, r22
 6b0:	17 06       	cpc	r1, r23
 6b2:	e8 07       	cpc	r30, r24
 6b4:	f9 07       	cpc	r31, r25
 6b6:	c0 f0       	brcs	.+48     	; 0x6e8 <__fp_cmp+0x46>
 6b8:	12 16       	cp	r1, r18
 6ba:	13 06       	cpc	r1, r19
 6bc:	e4 07       	cpc	r30, r20
 6be:	f5 07       	cpc	r31, r21
 6c0:	98 f0       	brcs	.+38     	; 0x6e8 <__fp_cmp+0x46>
 6c2:	62 1b       	sub	r22, r18
 6c4:	73 0b       	sbc	r23, r19
 6c6:	84 0b       	sbc	r24, r20
 6c8:	95 0b       	sbc	r25, r21
 6ca:	39 f4       	brne	.+14     	; 0x6da <__fp_cmp+0x38>
 6cc:	0a 26       	eor	r0, r26
 6ce:	61 f0       	breq	.+24     	; 0x6e8 <__fp_cmp+0x46>
 6d0:	23 2b       	or	r18, r19
 6d2:	24 2b       	or	r18, r20
 6d4:	25 2b       	or	r18, r21
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <__fp_cmp+0x3e>
 6d8:	08 95       	ret
 6da:	0a 26       	eor	r0, r26
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <__fp_cmp+0x3e>
 6de:	a1 40       	sbci	r26, 0x01	; 1
 6e0:	a6 95       	lsr	r26
 6e2:	8f ef       	ldi	r24, 0xFF	; 255
 6e4:	81 1d       	adc	r24, r1
 6e6:	81 1d       	adc	r24, r1
 6e8:	08 95       	ret

000006ea <__fp_inf>:
 6ea:	97 f9       	bld	r25, 7
 6ec:	9f 67       	ori	r25, 0x7F	; 127
 6ee:	80 e8       	ldi	r24, 0x80	; 128
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	08 95       	ret

000006f6 <__fp_nan>:
 6f6:	9f ef       	ldi	r25, 0xFF	; 255
 6f8:	80 ec       	ldi	r24, 0xC0	; 192
 6fa:	08 95       	ret

000006fc <__fp_pscA>:
 6fc:	00 24       	eor	r0, r0
 6fe:	0a 94       	dec	r0
 700:	16 16       	cp	r1, r22
 702:	17 06       	cpc	r1, r23
 704:	18 06       	cpc	r1, r24
 706:	09 06       	cpc	r0, r25
 708:	08 95       	ret

0000070a <__fp_pscB>:
 70a:	00 24       	eor	r0, r0
 70c:	0a 94       	dec	r0
 70e:	12 16       	cp	r1, r18
 710:	13 06       	cpc	r1, r19
 712:	14 06       	cpc	r1, r20
 714:	05 06       	cpc	r0, r21
 716:	08 95       	ret

00000718 <__fp_round>:
 718:	09 2e       	mov	r0, r25
 71a:	03 94       	inc	r0
 71c:	00 0c       	add	r0, r0
 71e:	11 f4       	brne	.+4      	; 0x724 <__fp_round+0xc>
 720:	88 23       	and	r24, r24
 722:	52 f0       	brmi	.+20     	; 0x738 <__fp_round+0x20>
 724:	bb 0f       	add	r27, r27
 726:	40 f4       	brcc	.+16     	; 0x738 <__fp_round+0x20>
 728:	bf 2b       	or	r27, r31
 72a:	11 f4       	brne	.+4      	; 0x730 <__fp_round+0x18>
 72c:	60 ff       	sbrs	r22, 0
 72e:	04 c0       	rjmp	.+8      	; 0x738 <__fp_round+0x20>
 730:	6f 5f       	subi	r22, 0xFF	; 255
 732:	7f 4f       	sbci	r23, 0xFF	; 255
 734:	8f 4f       	sbci	r24, 0xFF	; 255
 736:	9f 4f       	sbci	r25, 0xFF	; 255
 738:	08 95       	ret

0000073a <__fp_split3>:
 73a:	57 fd       	sbrc	r21, 7
 73c:	90 58       	subi	r25, 0x80	; 128
 73e:	44 0f       	add	r20, r20
 740:	55 1f       	adc	r21, r21
 742:	59 f0       	breq	.+22     	; 0x75a <__fp_splitA+0x10>
 744:	5f 3f       	cpi	r21, 0xFF	; 255
 746:	71 f0       	breq	.+28     	; 0x764 <__fp_splitA+0x1a>
 748:	47 95       	ror	r20

0000074a <__fp_splitA>:
 74a:	88 0f       	add	r24, r24
 74c:	97 fb       	bst	r25, 7
 74e:	99 1f       	adc	r25, r25
 750:	61 f0       	breq	.+24     	; 0x76a <__fp_splitA+0x20>
 752:	9f 3f       	cpi	r25, 0xFF	; 255
 754:	79 f0       	breq	.+30     	; 0x774 <__fp_splitA+0x2a>
 756:	87 95       	ror	r24
 758:	08 95       	ret
 75a:	12 16       	cp	r1, r18
 75c:	13 06       	cpc	r1, r19
 75e:	14 06       	cpc	r1, r20
 760:	55 1f       	adc	r21, r21
 762:	f2 cf       	rjmp	.-28     	; 0x748 <__fp_split3+0xe>
 764:	46 95       	lsr	r20
 766:	f1 df       	rcall	.-30     	; 0x74a <__fp_splitA>
 768:	08 c0       	rjmp	.+16     	; 0x77a <__fp_splitA+0x30>
 76a:	16 16       	cp	r1, r22
 76c:	17 06       	cpc	r1, r23
 76e:	18 06       	cpc	r1, r24
 770:	99 1f       	adc	r25, r25
 772:	f1 cf       	rjmp	.-30     	; 0x756 <__fp_splitA+0xc>
 774:	86 95       	lsr	r24
 776:	71 05       	cpc	r23, r1
 778:	61 05       	cpc	r22, r1
 77a:	08 94       	sec
 77c:	08 95       	ret

0000077e <__fp_zero>:
 77e:	e8 94       	clt

00000780 <__fp_szero>:
 780:	bb 27       	eor	r27, r27
 782:	66 27       	eor	r22, r22
 784:	77 27       	eor	r23, r23
 786:	cb 01       	movw	r24, r22
 788:	97 f9       	bld	r25, 7
 78a:	08 95       	ret

0000078c <__gesf2>:
 78c:	8a df       	rcall	.-236    	; 0x6a2 <__fp_cmp>
 78e:	08 f4       	brcc	.+2      	; 0x792 <__gesf2+0x6>
 790:	8f ef       	ldi	r24, 0xFF	; 255
 792:	08 95       	ret

00000794 <__mulsf3>:
 794:	0a d0       	rcall	.+20     	; 0x7aa <__mulsf3x>
 796:	c0 cf       	rjmp	.-128    	; 0x718 <__fp_round>
 798:	b1 df       	rcall	.-158    	; 0x6fc <__fp_pscA>
 79a:	28 f0       	brcs	.+10     	; 0x7a6 <__mulsf3+0x12>
 79c:	b6 df       	rcall	.-148    	; 0x70a <__fp_pscB>
 79e:	18 f0       	brcs	.+6      	; 0x7a6 <__mulsf3+0x12>
 7a0:	95 23       	and	r25, r21
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <__mulsf3+0x12>
 7a4:	a2 cf       	rjmp	.-188    	; 0x6ea <__fp_inf>
 7a6:	a7 cf       	rjmp	.-178    	; 0x6f6 <__fp_nan>
 7a8:	eb cf       	rjmp	.-42     	; 0x780 <__fp_szero>

000007aa <__mulsf3x>:
 7aa:	c7 df       	rcall	.-114    	; 0x73a <__fp_split3>
 7ac:	a8 f3       	brcs	.-22     	; 0x798 <__mulsf3+0x4>

000007ae <__mulsf3_pse>:
 7ae:	99 23       	and	r25, r25
 7b0:	d9 f3       	breq	.-10     	; 0x7a8 <__mulsf3+0x14>
 7b2:	55 23       	and	r21, r21
 7b4:	c9 f3       	breq	.-14     	; 0x7a8 <__mulsf3+0x14>
 7b6:	95 0f       	add	r25, r21
 7b8:	50 e0       	ldi	r21, 0x00	; 0
 7ba:	55 1f       	adc	r21, r21
 7bc:	aa 27       	eor	r26, r26
 7be:	ee 27       	eor	r30, r30
 7c0:	ff 27       	eor	r31, r31
 7c2:	bb 27       	eor	r27, r27
 7c4:	00 24       	eor	r0, r0
 7c6:	08 94       	sec
 7c8:	67 95       	ror	r22
 7ca:	20 f4       	brcc	.+8      	; 0x7d4 <__mulsf3_pse+0x26>
 7cc:	e2 0f       	add	r30, r18
 7ce:	f3 1f       	adc	r31, r19
 7d0:	b4 1f       	adc	r27, r20
 7d2:	0a 1e       	adc	r0, r26
 7d4:	22 0f       	add	r18, r18
 7d6:	33 1f       	adc	r19, r19
 7d8:	44 1f       	adc	r20, r20
 7da:	aa 1f       	adc	r26, r26
 7dc:	66 95       	lsr	r22
 7de:	a9 f7       	brne	.-22     	; 0x7ca <__mulsf3_pse+0x1c>
 7e0:	77 95       	ror	r23
 7e2:	30 f4       	brcc	.+12     	; 0x7f0 <__mulsf3_pse+0x42>
 7e4:	f3 0f       	add	r31, r19
 7e6:	b4 1f       	adc	r27, r20
 7e8:	0a 1e       	adc	r0, r26
 7ea:	12 1e       	adc	r1, r18
 7ec:	08 f4       	brcc	.+2      	; 0x7f0 <__mulsf3_pse+0x42>
 7ee:	63 95       	inc	r22
 7f0:	33 0f       	add	r19, r19
 7f2:	44 1f       	adc	r20, r20
 7f4:	aa 1f       	adc	r26, r26
 7f6:	22 1f       	adc	r18, r18
 7f8:	76 95       	lsr	r23
 7fa:	99 f7       	brne	.-26     	; 0x7e2 <__mulsf3_pse+0x34>
 7fc:	87 95       	ror	r24
 7fe:	20 f4       	brcc	.+8      	; 0x808 <__mulsf3_pse+0x5a>
 800:	b4 0f       	add	r27, r20
 802:	0a 1e       	adc	r0, r26
 804:	12 1e       	adc	r1, r18
 806:	63 1f       	adc	r22, r19
 808:	44 0f       	add	r20, r20
 80a:	aa 1f       	adc	r26, r26
 80c:	22 1f       	adc	r18, r18
 80e:	33 1f       	adc	r19, r19
 810:	86 95       	lsr	r24
 812:	a9 f7       	brne	.-22     	; 0x7fe <__mulsf3_pse+0x50>
 814:	86 2f       	mov	r24, r22
 816:	71 2d       	mov	r23, r1
 818:	60 2d       	mov	r22, r0
 81a:	11 24       	eor	r1, r1
 81c:	9f 57       	subi	r25, 0x7F	; 127
 81e:	50 40       	sbci	r21, 0x00	; 0
 820:	8a f0       	brmi	.+34     	; 0x844 <__mulsf3_pse+0x96>
 822:	e1 f0       	breq	.+56     	; 0x85c <__mulsf3_pse+0xae>
 824:	88 23       	and	r24, r24
 826:	4a f0       	brmi	.+18     	; 0x83a <__mulsf3_pse+0x8c>
 828:	ee 0f       	add	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	bb 1f       	adc	r27, r27
 82e:	66 1f       	adc	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	91 50       	subi	r25, 0x01	; 1
 836:	50 40       	sbci	r21, 0x00	; 0
 838:	a9 f7       	brne	.-22     	; 0x824 <__mulsf3_pse+0x76>
 83a:	9e 3f       	cpi	r25, 0xFE	; 254
 83c:	51 05       	cpc	r21, r1
 83e:	70 f0       	brcs	.+28     	; 0x85c <__mulsf3_pse+0xae>
 840:	54 cf       	rjmp	.-344    	; 0x6ea <__fp_inf>
 842:	9e cf       	rjmp	.-196    	; 0x780 <__fp_szero>
 844:	5f 3f       	cpi	r21, 0xFF	; 255
 846:	ec f3       	brlt	.-6      	; 0x842 <__mulsf3_pse+0x94>
 848:	98 3e       	cpi	r25, 0xE8	; 232
 84a:	dc f3       	brlt	.-10     	; 0x842 <__mulsf3_pse+0x94>
 84c:	86 95       	lsr	r24
 84e:	77 95       	ror	r23
 850:	67 95       	ror	r22
 852:	b7 95       	ror	r27
 854:	f7 95       	ror	r31
 856:	e7 95       	ror	r30
 858:	9f 5f       	subi	r25, 0xFF	; 255
 85a:	c1 f7       	brne	.-16     	; 0x84c <__mulsf3_pse+0x9e>
 85c:	fe 2b       	or	r31, r30
 85e:	88 0f       	add	r24, r24
 860:	91 1d       	adc	r25, r1
 862:	96 95       	lsr	r25
 864:	87 95       	ror	r24
 866:	97 f9       	bld	r25, 7
 868:	08 95       	ret

0000086a <__udivmodhi4>:
 86a:	aa 1b       	sub	r26, r26
 86c:	bb 1b       	sub	r27, r27
 86e:	51 e1       	ldi	r21, 0x11	; 17
 870:	07 c0       	rjmp	.+14     	; 0x880 <__udivmodhi4_ep>

00000872 <__udivmodhi4_loop>:
 872:	aa 1f       	adc	r26, r26
 874:	bb 1f       	adc	r27, r27
 876:	a6 17       	cp	r26, r22
 878:	b7 07       	cpc	r27, r23
 87a:	10 f0       	brcs	.+4      	; 0x880 <__udivmodhi4_ep>
 87c:	a6 1b       	sub	r26, r22
 87e:	b7 0b       	sbc	r27, r23

00000880 <__udivmodhi4_ep>:
 880:	88 1f       	adc	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	5a 95       	dec	r21
 886:	a9 f7       	brne	.-22     	; 0x872 <__udivmodhi4_loop>
 888:	80 95       	com	r24
 88a:	90 95       	com	r25
 88c:	bc 01       	movw	r22, r24
 88e:	cd 01       	movw	r24, r26
 890:	08 95       	ret

00000892 <_exit>:
 892:	f8 94       	cli

00000894 <__stop_program>:
 894:	ff cf       	rjmp	.-2      	; 0x894 <__stop_program>
