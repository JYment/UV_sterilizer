
CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000090a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000097e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  0000097e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ace  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000703  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000647  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  0000227c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000735  00000000  00000000  00002824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002f59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	8a c1       	rjmp	.+788    	; 0x31c <__vector_3>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__vector_6>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a8 36       	cpi	r26, 0x68	; 104
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	e8 d1       	rcall	.+976    	; 0x410 <main>
  40:	62 c4       	rjmp	.+2244   	; 0x906 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_6>:
			break;
	}
}

ISR(TIM1_COMPA_vect)
{
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	2f 93       	push	r18
  50:	8f 93       	push	r24
  52:	9f 93       	push	r25
	cnt++;
  54:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cnt>
  58:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <cnt+0x1>
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <cnt+0x1>
  62:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <cnt>
	if(state_ON == ON)
  66:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <state_ON>
  6a:	81 30       	cpi	r24, 0x01	; 1
  6c:	b1 f5       	brne	.+108    	; 0xda <__vector_6+0x96>
	{
		if(cnt >= 1999)								// 0.5s CNT
  6e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <cnt>
  72:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <cnt+0x1>
  76:	8f 3c       	cpi	r24, 0xCF	; 207
  78:	97 40       	sbci	r25, 0x07	; 7
  7a:	b8 f1       	brcs	.+110    	; 0xea <__vector_6+0xa6>
		{
			if(sec_cnt < 1800)						// 900s (15min) CNT
  7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  80:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  84:	88 30       	cpi	r24, 0x08	; 8
  86:	97 40       	sbci	r25, 0x07	; 7
  88:	e8 f4       	brcc	.+58     	; 0xc4 <__vector_6+0x80>
			{
				PORTA ^= (1 << STATE_LED);
  8a:	9b b3       	in	r25, 0x1b	; 27
  8c:	88 e0       	ldi	r24, 0x08	; 8
  8e:	89 27       	eor	r24, r25
  90:	8b bb       	out	0x1b, r24	; 27
				switch(state_Power)
  92:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state_Power>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	31 f0       	breq	.+12     	; 0xa6 <__vector_6+0x62>
  9a:	18 f0       	brcs	.+6      	; 0xa2 <__vector_6+0x5e>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	31 f0       	breq	.+12     	; 0xac <__vector_6+0x68>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <__vector_6+0x6c>
				{
					case POW_LOW:
					OCR0A = 0;
  a2:	16 be       	out	0x36, r1	; 54
					break;
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <__vector_6+0x6c>
					case POW_MEDIUM:
					OCR0A = 10;
  a6:	8a e0       	ldi	r24, 0x0A	; 10
  a8:	86 bf       	out	0x36, r24	; 54
					break;
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__vector_6+0x6c>
					case POW_HIGH:
					OCR0A = 20;
  ac:	84 e1       	ldi	r24, 0x14	; 20
  ae:	86 bf       	out	0x36, r24	; 54
					break;
				}
				
				sec_cnt++;
  b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <__vector_6+0x8c>
			}
			else
			{
				state_ON = OFF;
  c4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <state_ON>
				sec_cnt = 0;
  c8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			}
			cnt = 0;
  d0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt+0x1>
  d4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cnt>
  d8:	08 c0       	rjmp	.+16     	; 0xea <__vector_6+0xa6>
		}
	}
	else
	{
		sec_cnt = 0;
  da:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		cnt = 0;
  e2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt+0x1>
  e6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cnt>
	}
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <select_pow_color>:

void select_pow_color(uint8_t selection)
{
	switch(selection)
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	51 f0       	breq	.+20     	; 0x112 <select_pow_color+0x18>
  fe:	18 f0       	brcs	.+6      	; 0x106 <select_pow_color+0xc>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	69 f0       	breq	.+26     	; 0x11e <select_pow_color+0x24>
 104:	08 95       	ret
	{
		case POW_LOW:
		ws2812b_show_color(1, 0, 255, 0);
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	4f ef       	ldi	r20, 0xFF	; 255
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	ae d1       	rcall	.+860    	; 0x46c <ws2812b_show_color>
		break;
 110:	08 95       	ret
		case POW_MEDIUM:
		ws2812b_show_color(1, 255, 0, 0);		
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	6f ef       	ldi	r22, 0xFF	; 255
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	a8 d1       	rcall	.+848    	; 0x46c <ws2812b_show_color>
		break;
 11c:	08 95       	ret
		case POW_HIGH:
		ws2812b_show_color(1, 0, 0, 255);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	a2 d1       	rcall	.+836    	; 0x46c <ws2812b_show_color>
 128:	08 95       	ret

0000012a <bz_operation>:
		break;
	}
}

void bz_operation(uint16_t hz, uint16_t count)
{
 12a:	2f 92       	push	r2
 12c:	3f 92       	push	r3
 12e:	4f 92       	push	r4
 130:	5f 92       	push	r5
 132:	6f 92       	push	r6
 134:	7f 92       	push	r7
 136:	8f 92       	push	r8
 138:	9f 92       	push	r9
 13a:	af 92       	push	r10
 13c:	bf 92       	push	r11
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	2a 97       	sbiw	r28, 0x0a	; 10
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	1b 01       	movw	r2, r22
	uint16_t i, ms, us;
	ms = 1000/(2*hz);								// 1개 펄스의 ON 또는 OFF의 ms 단위 시간
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	9a 83       	std	Y+2, r25	; 0x02
 166:	89 83       	std	Y+1, r24	; 0x01
	us = (1000.0/(2*hz) - ms) * 1000;				// 1개 펄스의 ON 또는 OFF의 us 단위 시간
 168:	bc 01       	movw	r22, r24
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	96 d2       	rcall	.+1324   	; 0x69c <__floatunsisf>
 170:	9b 01       	movw	r18, r22
 172:	ac 01       	movw	r20, r24
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	8a e7       	ldi	r24, 0x7A	; 122
 17a:	94 e4       	ldi	r25, 0x44	; 68
 17c:	fb d1       	rcall	.+1014   	; 0x574 <__divsf3>
 17e:	6b 01       	movw	r12, r22
 180:	7c 01       	movw	r14, r24
 182:	88 ee       	ldi	r24, 0xE8	; 232
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	69 81       	ldd	r22, Y+1	; 0x01
 188:	7a 81       	ldd	r23, Y+2	; 0x02
 18a:	a9 d3       	rcall	.+1874   	; 0x8de <__udivmodhi4>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	85 d2       	rcall	.+1290   	; 0x69c <__floatunsisf>
 192:	9b 01       	movw	r18, r22
 194:	ac 01       	movw	r20, r24
 196:	c7 01       	movw	r24, r14
 198:	b6 01       	movw	r22, r12
 19a:	83 d1       	rcall	.+774    	; 0x4a2 <__subsf3>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	4a e7       	ldi	r20, 0x7A	; 122
 1a2:	54 e4       	ldi	r21, 0x44	; 68
 1a4:	31 d3       	rcall	.+1634   	; 0x808 <__mulsf3>
 1a6:	4e d2       	rcall	.+1180   	; 0x644 <__fixunssfsi>
	for(i=0; i<count; i++)
 1a8:	21 14       	cp	r2, r1
 1aa:	31 04       	cpc	r3, r1
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <__stack+0x51>
 1ae:	9d c0       	rjmp	.+314    	; 0x2ea <__stack+0x18b>
	{
		PORTA ^= (1 << PORTA2);						// Buzzer ON - OFF
		_delay_us(us);								// (us)us 동안 delay
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	73 d2       	rcall	.+1254   	; 0x69c <__floatunsisf>
 1b6:	6b 01       	movw	r12, r22
 1b8:	7c 01       	movw	r14, r24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 1ba:	2b ea       	ldi	r18, 0xAB	; 171
 1bc:	3a ea       	ldi	r19, 0xAA	; 170
 1be:	4a e2       	ldi	r20, 0x2A	; 42
 1c0:	50 e4       	ldi	r21, 0x40	; 64
 1c2:	22 d3       	rcall	.+1604   	; 0x808 <__mulsf3>
 1c4:	69 83       	std	Y+1, r22	; 0x01
 1c6:	7a 83       	std	Y+2, r23	; 0x02
 1c8:	8b 83       	std	Y+3, r24	; 0x03
 1ca:	9c 83       	std	Y+4, r25	; 0x04
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 1cc:	3b d2       	rcall	.+1142   	; 0x644 <__fixunssfsi>
 1ce:	1e 82       	std	Y+6, r1	; 0x06
 1d0:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t i, ms, us;
	ms = 1000/(2*hz);								// 1개 펄스의 ON 또는 OFF의 ms 단위 시간
	us = (1000.0/(2*hz) - ms) * 1000;				// 1개 펄스의 ON 또는 OFF의 us 단위 시간
	for(i=0; i<count; i++)
	{
		PORTA ^= (1 << PORTA2);						// Buzzer ON - OFF
 1d2:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 1d4:	55 24       	eor	r5, r5
 1d6:	53 94       	inc	r5
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 1d8:	46 2e       	mov	r4, r22
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1da:	0f 2e       	mov	r0, r31
 1dc:	f8 ec       	ldi	r31, 0xC8	; 200
 1de:	6f 2e       	mov	r6, r31
 1e0:	71 2c       	mov	r7, r1
 1e2:	f0 2d       	mov	r31, r0
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	3a 87       	std	Y+10, r19	; 0x0a
 1ea:	29 87       	std	Y+9, r18	; 0x09
 1ec:	8b b3       	in	r24, 0x1b	; 27
 1ee:	81 27       	eor	r24, r17
 1f0:	8b bb       	out	0x1b, r24	; 27
#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	40 e8       	ldi	r20, 0x80	; 128
 1f8:	5f e3       	ldi	r21, 0x3F	; 63
 1fa:	69 81       	ldd	r22, Y+1	; 0x01
 1fc:	7a 81       	ldd	r23, Y+2	; 0x02
 1fe:	8b 81       	ldd	r24, Y+3	; 0x03
 200:	9c 81       	ldd	r25, Y+4	; 0x04
 202:	b4 d1       	rcall	.+872    	; 0x56c <__cmpsf2>
 204:	88 23       	and	r24, r24
 206:	0c f4       	brge	.+2      	; 0x20a <__stack+0xab>
 208:	61 c0       	rjmp	.+194    	; 0x2cc <__stack+0x16d>

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
 20a:	a7 01       	movw	r20, r14
 20c:	96 01       	movw	r18, r12
 20e:	c7 01       	movw	r24, r14
 210:	b6 01       	movw	r22, r12
 212:	48 d1       	rcall	.+656    	; 0x4a4 <__addsf3>
 214:	4b 01       	movw	r8, r22
 216:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp2 > 65535)
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	3f ef       	ldi	r19, 0xFF	; 255
 21c:	4f e7       	ldi	r20, 0x7F	; 127
 21e:	57 e4       	ldi	r21, 0x47	; 71
 220:	ef d2       	rcall	.+1502   	; 0x800 <__gesf2>
 222:	18 16       	cp	r1, r24
 224:	0c f0       	brlt	.+2      	; 0x228 <__stack+0xc9>
 226:	40 c0       	rjmp	.+128    	; 0x2a8 <__stack+0x149>
	{
		_delay_ms(__us / 1000.0);
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	4a e7       	ldi	r20, 0x7A	; 122
 22e:	54 e4       	ldi	r21, 0x44	; 68
 230:	c7 01       	movw	r24, r14
 232:	b6 01       	movw	r22, r12
 234:	9f d1       	rcall	.+830    	; 0x574 <__divsf3>
 236:	6d 83       	std	Y+5, r22	; 0x05
 238:	7e 83       	std	Y+6, r23	; 0x06
 23a:	8f 83       	std	Y+7, r24	; 0x07
 23c:	98 87       	std	Y+8, r25	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	4a ef       	ldi	r20, 0xFA	; 250
 244:	54 e4       	ldi	r21, 0x44	; 68
 246:	e0 d2       	rcall	.+1472   	; 0x808 <__mulsf3>
 248:	4b 01       	movw	r8, r22
 24a:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e8       	ldi	r20, 0x80	; 128
 252:	5f e3       	ldi	r21, 0x3F	; 63
 254:	8b d1       	rcall	.+790    	; 0x56c <__cmpsf2>
 256:	88 23       	and	r24, r24
 258:	0c f1       	brlt	.+66     	; 0x29c <__stack+0x13d>
		__ticks = 1;
	else if (__tmp > 65535)
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	3f ef       	ldi	r19, 0xFF	; 255
 25e:	4f e7       	ldi	r20, 0x7F	; 127
 260:	57 e4       	ldi	r21, 0x47	; 71
 262:	c5 01       	movw	r24, r10
 264:	b4 01       	movw	r22, r8
 266:	cc d2       	rcall	.+1432   	; 0x800 <__gesf2>
 268:	18 16       	cp	r1, r24
 26a:	a4 f4       	brge	.+40     	; 0x294 <__stack+0x135>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e2       	ldi	r20, 0x20	; 32
 272:	51 e4       	ldi	r21, 0x41	; 65
 274:	6d 81       	ldd	r22, Y+5	; 0x05
 276:	7e 81       	ldd	r23, Y+6	; 0x06
 278:	8f 81       	ldd	r24, Y+7	; 0x07
 27a:	98 85       	ldd	r25, Y+8	; 0x08
 27c:	c5 d2       	rcall	.+1418   	; 0x808 <__mulsf3>
 27e:	e2 d1       	rcall	.+964    	; 0x644 <__fixunssfsi>
		while(__ticks)
 280:	61 15       	cp	r22, r1
 282:	71 05       	cpc	r23, r1
 284:	31 f1       	breq	.+76     	; 0x2d2 <__stack+0x173>
 286:	c3 01       	movw	r24, r6
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <__stack+0x129>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28c:	61 50       	subi	r22, 0x01	; 1
 28e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 290:	d1 f7       	brne	.-12     	; 0x286 <__stack+0x127>
 292:	1f c0       	rjmp	.+62     	; 0x2d2 <__stack+0x173>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 294:	c5 01       	movw	r24, r10
 296:	b4 01       	movw	r22, r8
 298:	d5 d1       	rcall	.+938    	; 0x644 <__fixunssfsi>
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__stack+0x141>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	cb 01       	movw	r24, r22
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <__stack+0x143>
 2a6:	15 c0       	rjmp	.+42     	; 0x2d2 <__stack+0x173>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	4f e7       	ldi	r20, 0x7F	; 127
 2ae:	53 e4       	ldi	r21, 0x43	; 67
 2b0:	69 81       	ldd	r22, Y+1	; 0x01
 2b2:	7a 81       	ldd	r23, Y+2	; 0x02
 2b4:	8b 81       	ldd	r24, Y+3	; 0x03
 2b6:	9c 81       	ldd	r25, Y+4	; 0x04
 2b8:	a3 d2       	rcall	.+1350   	; 0x800 <__gesf2>
 2ba:	18 16       	cp	r1, r24
 2bc:	4c f4       	brge	.+18     	; 0x2d0 <__stack+0x171>
 2be:	c5 01       	movw	r24, r10
 2c0:	b4 01       	movw	r22, r8
 2c2:	c0 d1       	rcall	.+896    	; 0x644 <__fixunssfsi>
 2c4:	cb 01       	movw	r24, r22
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <__stack+0x167>
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__stack+0x179>
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
	__tmp2 = ((F_CPU) / 4e6) * __us;
	if (__tmp < 1.0)
		__ticks = 1;
 2cc:	05 2d       	mov	r16, r5
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <__stack+0x173>
		uint16_t __ticks=(uint16_t)__tmp2;
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 2d0:	04 2d       	mov	r16, r4
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2d2:	80 2f       	mov	r24, r16
 2d4:	8a 95       	dec	r24
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <__stack+0x175>
void bz_operation(uint16_t hz, uint16_t count)
{
	uint16_t i, ms, us;
	ms = 1000/(2*hz);								// 1개 펄스의 ON 또는 OFF의 ms 단위 시간
	us = (1000.0/(2*hz) - ms) * 1000;				// 1개 펄스의 ON 또는 OFF의 us 단위 시간
	for(i=0; i<count; i++)
 2d8:	89 85       	ldd	r24, Y+9	; 0x09
 2da:	9a 85       	ldd	r25, Y+10	; 0x0a
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	9a 87       	std	Y+10, r25	; 0x0a
 2e0:	89 87       	std	Y+9, r24	; 0x09
 2e2:	28 16       	cp	r2, r24
 2e4:	39 06       	cpc	r3, r25
 2e6:	09 f0       	breq	.+2      	; 0x2ea <__stack+0x18b>
 2e8:	81 cf       	rjmp	.-254    	; 0x1ec <__stack+0x8d>
	{
		PORTA ^= (1 << PORTA2);						// Buzzer ON - OFF
		_delay_us(us);								// (us)us 동안 delay
	}
}
 2ea:	2a 96       	adiw	r28, 0x0a	; 10
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	bf 90       	pop	r11
 308:	af 90       	pop	r10
 30a:	9f 90       	pop	r9
 30c:	8f 90       	pop	r8
 30e:	7f 90       	pop	r7
 310:	6f 90       	pop	r6
 312:	5f 90       	pop	r5
 314:	4f 90       	pop	r4
 316:	3f 90       	pop	r3
 318:	2f 90       	pop	r2
 31a:	08 95       	ret

0000031c <__vector_3>:
void select_pow_color(uint8_t selection);
void UV_util_init(void);
void bz_operation(uint16_t hz, uint16_t count);

ISR(PCINT1_vect)
{
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
	uint8_t check_pin = PINB & 0x03;				// PCINT8, PCINT9 check (PB0, PB1)
 33e:	86 b3       	in	r24, 0x16	; 22
// 	_delay_ms(100);									// debounce (if use cap(up to 100nF), remove this)
	switch(check_pin)
 340:	83 70       	andi	r24, 0x03	; 3
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	a9 f0       	breq	.+42     	; 0x370 <__vector_3+0x54>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	71 f5       	brne	.+92     	; 0x3a6 <__vector_3+0x8a>
	{
		case TOUCH_FLAG_ON:							// PCINT9(PB1) Clicked
			if(key_flag_ON == 0)
 34a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <key_flag_ON>
 34e:	81 11       	cpse	r24, r1
 350:	2e c0       	rjmp	.+92     	; 0x3ae <__vector_3+0x92>
			{
				key_flag_ON = 1;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <key_flag_ON>
				state_ON = !state_ON;
 358:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <state_ON>
 35c:	91 11       	cpse	r25, r1
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <state_ON>
				bz_operation(NOTE_C6, 150);
 364:	66 e9       	ldi	r22, 0x96	; 150
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	87 e1       	ldi	r24, 0x17	; 23
 36a:	94 e0       	ldi	r25, 0x04	; 4
 36c:	de de       	rcall	.-580    	; 0x12a <bz_operation>
 36e:	1f c0       	rjmp	.+62     	; 0x3ae <__vector_3+0x92>
			}
			break;
		case TOUCH_FLAG_POW:						// PCINT8(PB0) Clicked
			if(!key_flag_Power)
 370:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <key_flag_Power>
 374:	81 11       	cpse	r24, r1
 376:	1b c0       	rjmp	.+54     	; 0x3ae <__vector_3+0x92>
			{
				key_flag_Power = 1;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <key_flag_Power>
				state_Power++;
 37e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state_Power>
 382:	8f 5f       	subi	r24, 0xFF	; 255
 384:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <state_Power>
				if(state_Power>2)
 388:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state_Power>
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	10 f0       	brcs	.+4      	; 0x394 <__vector_3+0x78>
				{
					state_Power=0;
 390:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <state_Power>
				}
				select_pow_color(state_Power);
 394:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state_Power>
 398:	b0 de       	rcall	.-672    	; 0xfa <select_pow_color>
				bz_operation(NOTE_C6, 150);
 39a:	66 e9       	ldi	r22, 0x96	; 150
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	87 e1       	ldi	r24, 0x17	; 23
 3a0:	94 e0       	ldi	r25, 0x04	; 4
 3a2:	c3 de       	rcall	.-634    	; 0x12a <bz_operation>
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <__vector_3+0x92>
			}
			break;
		default:									// key_flag init
			key_flag_ON = 0;
 3a6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <key_flag_ON>
			key_flag_Power = 0;
 3aa:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <key_flag_Power>
			break;
	}
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <UV_util_init>:
}

void UV_util_init(void)
{
	// OUTPUT init
	DDRA |=	(1 << PORTA3) | (1 << PORTA7) | (1 << PORTA0);
 3d0:	8a b3       	in	r24, 0x1a	; 26
 3d2:	89 68       	ori	r24, 0x89	; 137
 3d4:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1 << PORTB2);
 3d6:	ba 9a       	sbi	0x17, 2	; 23

	// PIN Change Interrupt
	GIMSK = (1 << PCIE1);
 3d8:	80 e2       	ldi	r24, 0x20	; 32
 3da:	8b bf       	out	0x3b, r24	; 59
	GIFR = (1 << PCIF1);
 3dc:	8a bf       	out	0x3a, r24	; 58
	PCMSK1 = (1 << PCINT8) | (1 << PCINT9);
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	80 bd       	out	0x20, r24	; 32
	
	// TIMER0 8bit
	TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);		// FAST PWM MODE
 3e2:	83 e8       	ldi	r24, 0x83	; 131
 3e4:	80 bf       	out	0x30, r24	; 48
	TCCR0B = (1 << CS01);										// F_CPU/(2*Prescale*(1+249))
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	83 bf       	out	0x33, r24	; 51
	OCR0A = 0;
 3ea:	16 be       	out	0x36, r1	; 54

	// TIMER1 16bit
	TCCR1B = (1 << WGM12);
 3ec:	98 e0       	ldi	r25, 0x08	; 8
 3ee:	9e bd       	out	0x2e, r25	; 46
	TIMSK1 = (1 << OCIE1A);
 3f0:	8c b9       	out	0x0c, r24	; 12
	OCR1A = 249;
 3f2:	89 ef       	ldi	r24, 0xF9	; 249
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	9b bd       	out	0x2b, r25	; 43
 3f8:	8a bd       	out	0x2a, r24	; 42
	
	ws2812b_init();
 3fa:	29 d0       	rcall	.+82     	; 0x44e <ws2812b_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3fc:	80 e2       	ldi	r24, 0x20	; 32
 3fe:	9e e4       	ldi	r25, 0x4E	; 78
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
	_delay_ms(10);
	ws2812b_show_color(1, 0, 255, 0);
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	4f ef       	ldi	r20, 0xFF	; 255
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	2f d0       	rcall	.+94     	; 0x46c <ws2812b_show_color>
 40e:	08 95       	ret

00000410 <main>:
}

int main(void)
{
	UV_util_init();
 410:	df df       	rcall	.-66     	; 0x3d0 <UV_util_init>
	sei();
 412:	78 94       	sei
	
    while (1) 
    {
		if(state_ON == OFF)
 414:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <state_ON>
 418:	81 11       	cpse	r24, r1
 41a:	05 c0       	rjmp	.+10     	; 0x426 <main+0x16>
		{
			ON_STATE;							// 상태 LED ON
 41c:	db 9a       	sbi	0x1b, 3	; 27
			TCCR1B &= ~(1 << CS11);
 41e:	8e b5       	in	r24, 0x2e	; 46
 420:	8d 7f       	andi	r24, 0xFD	; 253
 422:	8e bd       	out	0x2e, r24	; 46
 424:	f7 cf       	rjmp	.-18     	; 0x414 <main+0x4>
		}
		else
		{
			TCCR1B |= (1 << CS11);				// 타이머 ON
 426:	8e b5       	in	r24, 0x2e	; 46
 428:	82 60       	ori	r24, 0x02	; 2
 42a:	8e bd       	out	0x2e, r24	; 46
 42c:	f3 cf       	rjmp	.-26     	; 0x414 <main+0x4>

0000042e <ws2812b_op>:
		ws2812b_op(0);
	}
}

void ws2812b_op(char scan)
{
 42e:	98 e0       	ldi	r25, 0x08	; 8
	char i;
	for(i=0; i<8; i++)
	{
		if(scan & 0x80)
 430:	88 23       	and	r24, r24
 432:	34 f4       	brge	.+12     	; 0x440 <ws2812b_op+0x12>
		{
			PORTA |= (1 << PORTA7);
 434:	df 9a       	sbi	0x1b, 7	; 27
			nop3;
 436:	00 00       	nop
 438:	00 00       	nop
 43a:	00 00       	nop
			PORTA &= ~(1 << PORTA7);
 43c:	df 98       	cbi	0x1b, 7	; 27
 43e:	03 c0       	rjmp	.+6      	; 0x446 <ws2812b_op+0x18>
		}
		else
		{
			PORTA |= (1 << PORTA7);
 440:	df 9a       	sbi	0x1b, 7	; 27
			nop;
 442:	00 00       	nop
			PORTA &= ~(1 << PORTA7);
 444:	df 98       	cbi	0x1b, 7	; 27
		}
		scan <<= 1;
 446:	88 0f       	add	r24, r24
 448:	91 50       	subi	r25, 0x01	; 1
}

void ws2812b_op(char scan)
{
	char i;
	for(i=0; i<8; i++)
 44a:	91 f7       	brne	.-28     	; 0x430 <ws2812b_op+0x2>
			nop;
			PORTA &= ~(1 << PORTA7);
		}
		scan <<= 1;
	}
}
 44c:	08 95       	ret

0000044e <ws2812b_init>:

#include <avr/io.h>
#include "ws2812b.h"

void ws2812b_init(void)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	c3 e0       	ldi	r28, 0x03	; 3
 454:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0; i<ws2812b_NUM; i++)
	{
		ws2812b_op(0);
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	ea df       	rcall	.-44     	; 0x42e <ws2812b_op>
		ws2812b_op(0);
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	e8 df       	rcall	.-48     	; 0x42e <ws2812b_op>
		ws2812b_op(0);
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	e6 df       	rcall	.-52     	; 0x42e <ws2812b_op>
 462:	21 97       	sbiw	r28, 0x01	; 1
#include <avr/io.h>
#include "ws2812b.h"

void ws2812b_init(void)
{
	for(int i=0; i<ws2812b_NUM; i++)
 464:	c1 f7       	brne	.-16     	; 0x456 <ws2812b_init+0x8>
	{
		ws2812b_op(0);
		ws2812b_op(0);
		ws2812b_op(0);
	}
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <ws2812b_show_color>:
		scan <<= 1;
	}
}

void ws2812b_show_color(char num, char green, char red, char blue)
{
 46c:	ff 92       	push	r15
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
	for(char i=0; i<num; i++)
 476:	88 23       	and	r24, r24
 478:	71 f0       	breq	.+28     	; 0x496 <ws2812b_show_color+0x2a>
 47a:	f2 2e       	mov	r15, r18
 47c:	04 2f       	mov	r16, r20
 47e:	16 2f       	mov	r17, r22
 480:	d8 2f       	mov	r29, r24
 482:	c0 e0       	ldi	r28, 0x00	; 0
	{
		ws2812b_op(green);
 484:	81 2f       	mov	r24, r17
 486:	d3 df       	rcall	.-90     	; 0x42e <ws2812b_op>
		ws2812b_op(red);
 488:	80 2f       	mov	r24, r16
 48a:	d1 df       	rcall	.-94     	; 0x42e <ws2812b_op>
		ws2812b_op(blue);
 48c:	8f 2d       	mov	r24, r15
 48e:	cf df       	rcall	.-98     	; 0x42e <ws2812b_op>
	}
}

void ws2812b_show_color(char num, char green, char red, char blue)
{
	for(char i=0; i<num; i++)
 490:	cf 5f       	subi	r28, 0xFF	; 255
 492:	dc 13       	cpse	r29, r28
 494:	f7 cf       	rjmp	.-18     	; 0x484 <ws2812b_show_color+0x18>
	{
		ws2812b_op(green);
		ws2812b_op(red);
		ws2812b_op(blue);
	}
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	08 95       	ret

000004a2 <__subsf3>:
 4a2:	50 58       	subi	r21, 0x80	; 128

000004a4 <__addsf3>:
 4a4:	bb 27       	eor	r27, r27
 4a6:	aa 27       	eor	r26, r26
 4a8:	0e d0       	rcall	.+28     	; 0x4c6 <__addsf3x>
 4aa:	70 c1       	rjmp	.+736    	; 0x78c <__fp_round>
 4ac:	61 d1       	rcall	.+706    	; 0x770 <__fp_pscA>
 4ae:	30 f0       	brcs	.+12     	; 0x4bc <__addsf3+0x18>
 4b0:	66 d1       	rcall	.+716    	; 0x77e <__fp_pscB>
 4b2:	20 f0       	brcs	.+8      	; 0x4bc <__addsf3+0x18>
 4b4:	31 f4       	brne	.+12     	; 0x4c2 <__addsf3+0x1e>
 4b6:	9f 3f       	cpi	r25, 0xFF	; 255
 4b8:	11 f4       	brne	.+4      	; 0x4be <__addsf3+0x1a>
 4ba:	1e f4       	brtc	.+6      	; 0x4c2 <__addsf3+0x1e>
 4bc:	56 c1       	rjmp	.+684    	; 0x76a <__fp_nan>
 4be:	0e f4       	brtc	.+2      	; 0x4c2 <__addsf3+0x1e>
 4c0:	e0 95       	com	r30
 4c2:	e7 fb       	bst	r30, 7
 4c4:	4c c1       	rjmp	.+664    	; 0x75e <__fp_inf>

000004c6 <__addsf3x>:
 4c6:	e9 2f       	mov	r30, r25
 4c8:	72 d1       	rcall	.+740    	; 0x7ae <__fp_split3>
 4ca:	80 f3       	brcs	.-32     	; 0x4ac <__addsf3+0x8>
 4cc:	ba 17       	cp	r27, r26
 4ce:	62 07       	cpc	r22, r18
 4d0:	73 07       	cpc	r23, r19
 4d2:	84 07       	cpc	r24, r20
 4d4:	95 07       	cpc	r25, r21
 4d6:	18 f0       	brcs	.+6      	; 0x4de <__addsf3x+0x18>
 4d8:	71 f4       	brne	.+28     	; 0x4f6 <__addsf3x+0x30>
 4da:	9e f5       	brtc	.+102    	; 0x542 <__addsf3x+0x7c>
 4dc:	8a c1       	rjmp	.+788    	; 0x7f2 <__fp_zero>
 4de:	0e f4       	brtc	.+2      	; 0x4e2 <__addsf3x+0x1c>
 4e0:	e0 95       	com	r30
 4e2:	0b 2e       	mov	r0, r27
 4e4:	ba 2f       	mov	r27, r26
 4e6:	a0 2d       	mov	r26, r0
 4e8:	0b 01       	movw	r0, r22
 4ea:	b9 01       	movw	r22, r18
 4ec:	90 01       	movw	r18, r0
 4ee:	0c 01       	movw	r0, r24
 4f0:	ca 01       	movw	r24, r20
 4f2:	a0 01       	movw	r20, r0
 4f4:	11 24       	eor	r1, r1
 4f6:	ff 27       	eor	r31, r31
 4f8:	59 1b       	sub	r21, r25
 4fa:	99 f0       	breq	.+38     	; 0x522 <__addsf3x+0x5c>
 4fc:	59 3f       	cpi	r21, 0xF9	; 249
 4fe:	50 f4       	brcc	.+20     	; 0x514 <__addsf3x+0x4e>
 500:	50 3e       	cpi	r21, 0xE0	; 224
 502:	68 f1       	brcs	.+90     	; 0x55e <__addsf3x+0x98>
 504:	1a 16       	cp	r1, r26
 506:	f0 40       	sbci	r31, 0x00	; 0
 508:	a2 2f       	mov	r26, r18
 50a:	23 2f       	mov	r18, r19
 50c:	34 2f       	mov	r19, r20
 50e:	44 27       	eor	r20, r20
 510:	58 5f       	subi	r21, 0xF8	; 248
 512:	f3 cf       	rjmp	.-26     	; 0x4fa <__addsf3x+0x34>
 514:	46 95       	lsr	r20
 516:	37 95       	ror	r19
 518:	27 95       	ror	r18
 51a:	a7 95       	ror	r26
 51c:	f0 40       	sbci	r31, 0x00	; 0
 51e:	53 95       	inc	r21
 520:	c9 f7       	brne	.-14     	; 0x514 <__addsf3x+0x4e>
 522:	7e f4       	brtc	.+30     	; 0x542 <__addsf3x+0x7c>
 524:	1f 16       	cp	r1, r31
 526:	ba 0b       	sbc	r27, r26
 528:	62 0b       	sbc	r22, r18
 52a:	73 0b       	sbc	r23, r19
 52c:	84 0b       	sbc	r24, r20
 52e:	ba f0       	brmi	.+46     	; 0x55e <__addsf3x+0x98>
 530:	91 50       	subi	r25, 0x01	; 1
 532:	a1 f0       	breq	.+40     	; 0x55c <__addsf3x+0x96>
 534:	ff 0f       	add	r31, r31
 536:	bb 1f       	adc	r27, r27
 538:	66 1f       	adc	r22, r22
 53a:	77 1f       	adc	r23, r23
 53c:	88 1f       	adc	r24, r24
 53e:	c2 f7       	brpl	.-16     	; 0x530 <__addsf3x+0x6a>
 540:	0e c0       	rjmp	.+28     	; 0x55e <__addsf3x+0x98>
 542:	ba 0f       	add	r27, r26
 544:	62 1f       	adc	r22, r18
 546:	73 1f       	adc	r23, r19
 548:	84 1f       	adc	r24, r20
 54a:	48 f4       	brcc	.+18     	; 0x55e <__addsf3x+0x98>
 54c:	87 95       	ror	r24
 54e:	77 95       	ror	r23
 550:	67 95       	ror	r22
 552:	b7 95       	ror	r27
 554:	f7 95       	ror	r31
 556:	9e 3f       	cpi	r25, 0xFE	; 254
 558:	08 f0       	brcs	.+2      	; 0x55c <__addsf3x+0x96>
 55a:	b3 cf       	rjmp	.-154    	; 0x4c2 <__addsf3+0x1e>
 55c:	93 95       	inc	r25
 55e:	88 0f       	add	r24, r24
 560:	08 f0       	brcs	.+2      	; 0x564 <__addsf3x+0x9e>
 562:	99 27       	eor	r25, r25
 564:	ee 0f       	add	r30, r30
 566:	97 95       	ror	r25
 568:	87 95       	ror	r24
 56a:	08 95       	ret

0000056c <__cmpsf2>:
 56c:	d4 d0       	rcall	.+424    	; 0x716 <__fp_cmp>
 56e:	08 f4       	brcc	.+2      	; 0x572 <__cmpsf2+0x6>
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	08 95       	ret

00000574 <__divsf3>:
 574:	0c d0       	rcall	.+24     	; 0x58e <__divsf3x>
 576:	0a c1       	rjmp	.+532    	; 0x78c <__fp_round>
 578:	02 d1       	rcall	.+516    	; 0x77e <__fp_pscB>
 57a:	40 f0       	brcs	.+16     	; 0x58c <__divsf3+0x18>
 57c:	f9 d0       	rcall	.+498    	; 0x770 <__fp_pscA>
 57e:	30 f0       	brcs	.+12     	; 0x58c <__divsf3+0x18>
 580:	21 f4       	brne	.+8      	; 0x58a <__divsf3+0x16>
 582:	5f 3f       	cpi	r21, 0xFF	; 255
 584:	19 f0       	breq	.+6      	; 0x58c <__divsf3+0x18>
 586:	eb c0       	rjmp	.+470    	; 0x75e <__fp_inf>
 588:	51 11       	cpse	r21, r1
 58a:	34 c1       	rjmp	.+616    	; 0x7f4 <__fp_szero>
 58c:	ee c0       	rjmp	.+476    	; 0x76a <__fp_nan>

0000058e <__divsf3x>:
 58e:	0f d1       	rcall	.+542    	; 0x7ae <__fp_split3>
 590:	98 f3       	brcs	.-26     	; 0x578 <__divsf3+0x4>

00000592 <__divsf3_pse>:
 592:	99 23       	and	r25, r25
 594:	c9 f3       	breq	.-14     	; 0x588 <__divsf3+0x14>
 596:	55 23       	and	r21, r21
 598:	b1 f3       	breq	.-20     	; 0x586 <__divsf3+0x12>
 59a:	95 1b       	sub	r25, r21
 59c:	55 0b       	sbc	r21, r21
 59e:	bb 27       	eor	r27, r27
 5a0:	aa 27       	eor	r26, r26
 5a2:	62 17       	cp	r22, r18
 5a4:	73 07       	cpc	r23, r19
 5a6:	84 07       	cpc	r24, r20
 5a8:	38 f0       	brcs	.+14     	; 0x5b8 <__divsf3_pse+0x26>
 5aa:	9f 5f       	subi	r25, 0xFF	; 255
 5ac:	5f 4f       	sbci	r21, 0xFF	; 255
 5ae:	22 0f       	add	r18, r18
 5b0:	33 1f       	adc	r19, r19
 5b2:	44 1f       	adc	r20, r20
 5b4:	aa 1f       	adc	r26, r26
 5b6:	a9 f3       	breq	.-22     	; 0x5a2 <__divsf3_pse+0x10>
 5b8:	33 d0       	rcall	.+102    	; 0x620 <__divsf3_pse+0x8e>
 5ba:	0e 2e       	mov	r0, r30
 5bc:	3a f0       	brmi	.+14     	; 0x5cc <__divsf3_pse+0x3a>
 5be:	e0 e8       	ldi	r30, 0x80	; 128
 5c0:	30 d0       	rcall	.+96     	; 0x622 <__divsf3_pse+0x90>
 5c2:	91 50       	subi	r25, 0x01	; 1
 5c4:	50 40       	sbci	r21, 0x00	; 0
 5c6:	e6 95       	lsr	r30
 5c8:	00 1c       	adc	r0, r0
 5ca:	ca f7       	brpl	.-14     	; 0x5be <__divsf3_pse+0x2c>
 5cc:	29 d0       	rcall	.+82     	; 0x620 <__divsf3_pse+0x8e>
 5ce:	fe 2f       	mov	r31, r30
 5d0:	27 d0       	rcall	.+78     	; 0x620 <__divsf3_pse+0x8e>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	88 1f       	adc	r24, r24
 5d8:	bb 1f       	adc	r27, r27
 5da:	26 17       	cp	r18, r22
 5dc:	37 07       	cpc	r19, r23
 5de:	48 07       	cpc	r20, r24
 5e0:	ab 07       	cpc	r26, r27
 5e2:	b0 e8       	ldi	r27, 0x80	; 128
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <__divsf3_pse+0x56>
 5e6:	bb 0b       	sbc	r27, r27
 5e8:	80 2d       	mov	r24, r0
 5ea:	bf 01       	movw	r22, r30
 5ec:	ff 27       	eor	r31, r31
 5ee:	93 58       	subi	r25, 0x83	; 131
 5f0:	5f 4f       	sbci	r21, 0xFF	; 255
 5f2:	2a f0       	brmi	.+10     	; 0x5fe <__divsf3_pse+0x6c>
 5f4:	9e 3f       	cpi	r25, 0xFE	; 254
 5f6:	51 05       	cpc	r21, r1
 5f8:	68 f0       	brcs	.+26     	; 0x614 <__divsf3_pse+0x82>
 5fa:	b1 c0       	rjmp	.+354    	; 0x75e <__fp_inf>
 5fc:	fb c0       	rjmp	.+502    	; 0x7f4 <__fp_szero>
 5fe:	5f 3f       	cpi	r21, 0xFF	; 255
 600:	ec f3       	brlt	.-6      	; 0x5fc <__divsf3_pse+0x6a>
 602:	98 3e       	cpi	r25, 0xE8	; 232
 604:	dc f3       	brlt	.-10     	; 0x5fc <__divsf3_pse+0x6a>
 606:	86 95       	lsr	r24
 608:	77 95       	ror	r23
 60a:	67 95       	ror	r22
 60c:	b7 95       	ror	r27
 60e:	f7 95       	ror	r31
 610:	9f 5f       	subi	r25, 0xFF	; 255
 612:	c9 f7       	brne	.-14     	; 0x606 <__divsf3_pse+0x74>
 614:	88 0f       	add	r24, r24
 616:	91 1d       	adc	r25, r1
 618:	96 95       	lsr	r25
 61a:	87 95       	ror	r24
 61c:	97 f9       	bld	r25, 7
 61e:	08 95       	ret
 620:	e1 e0       	ldi	r30, 0x01	; 1
 622:	66 0f       	add	r22, r22
 624:	77 1f       	adc	r23, r23
 626:	88 1f       	adc	r24, r24
 628:	bb 1f       	adc	r27, r27
 62a:	62 17       	cp	r22, r18
 62c:	73 07       	cpc	r23, r19
 62e:	84 07       	cpc	r24, r20
 630:	ba 07       	cpc	r27, r26
 632:	20 f0       	brcs	.+8      	; 0x63c <__divsf3_pse+0xaa>
 634:	62 1b       	sub	r22, r18
 636:	73 0b       	sbc	r23, r19
 638:	84 0b       	sbc	r24, r20
 63a:	ba 0b       	sbc	r27, r26
 63c:	ee 1f       	adc	r30, r30
 63e:	88 f7       	brcc	.-30     	; 0x622 <__divsf3_pse+0x90>
 640:	e0 95       	com	r30
 642:	08 95       	ret

00000644 <__fixunssfsi>:
 644:	bc d0       	rcall	.+376    	; 0x7be <__fp_splitA>
 646:	88 f0       	brcs	.+34     	; 0x66a <__fixunssfsi+0x26>
 648:	9f 57       	subi	r25, 0x7F	; 127
 64a:	90 f0       	brcs	.+36     	; 0x670 <__fixunssfsi+0x2c>
 64c:	b9 2f       	mov	r27, r25
 64e:	99 27       	eor	r25, r25
 650:	b7 51       	subi	r27, 0x17	; 23
 652:	a0 f0       	brcs	.+40     	; 0x67c <__fixunssfsi+0x38>
 654:	d1 f0       	breq	.+52     	; 0x68a <__fixunssfsi+0x46>
 656:	66 0f       	add	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	1a f0       	brmi	.+6      	; 0x666 <__fixunssfsi+0x22>
 660:	ba 95       	dec	r27
 662:	c9 f7       	brne	.-14     	; 0x656 <__fixunssfsi+0x12>
 664:	12 c0       	rjmp	.+36     	; 0x68a <__fixunssfsi+0x46>
 666:	b1 30       	cpi	r27, 0x01	; 1
 668:	81 f0       	breq	.+32     	; 0x68a <__fixunssfsi+0x46>
 66a:	c3 d0       	rcall	.+390    	; 0x7f2 <__fp_zero>
 66c:	b1 e0       	ldi	r27, 0x01	; 1
 66e:	08 95       	ret
 670:	c0 c0       	rjmp	.+384    	; 0x7f2 <__fp_zero>
 672:	67 2f       	mov	r22, r23
 674:	78 2f       	mov	r23, r24
 676:	88 27       	eor	r24, r24
 678:	b8 5f       	subi	r27, 0xF8	; 248
 67a:	39 f0       	breq	.+14     	; 0x68a <__fixunssfsi+0x46>
 67c:	b9 3f       	cpi	r27, 0xF9	; 249
 67e:	cc f3       	brlt	.-14     	; 0x672 <__fixunssfsi+0x2e>
 680:	86 95       	lsr	r24
 682:	77 95       	ror	r23
 684:	67 95       	ror	r22
 686:	b3 95       	inc	r27
 688:	d9 f7       	brne	.-10     	; 0x680 <__fixunssfsi+0x3c>
 68a:	3e f4       	brtc	.+14     	; 0x69a <__fixunssfsi+0x56>
 68c:	90 95       	com	r25
 68e:	80 95       	com	r24
 690:	70 95       	com	r23
 692:	61 95       	neg	r22
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	08 95       	ret

0000069c <__floatunsisf>:
 69c:	e8 94       	clt
 69e:	09 c0       	rjmp	.+18     	; 0x6b2 <__floatsisf+0x12>

000006a0 <__floatsisf>:
 6a0:	97 fb       	bst	r25, 7
 6a2:	3e f4       	brtc	.+14     	; 0x6b2 <__floatsisf+0x12>
 6a4:	90 95       	com	r25
 6a6:	80 95       	com	r24
 6a8:	70 95       	com	r23
 6aa:	61 95       	neg	r22
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8f 4f       	sbci	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	99 23       	and	r25, r25
 6b4:	a9 f0       	breq	.+42     	; 0x6e0 <__floatsisf+0x40>
 6b6:	f9 2f       	mov	r31, r25
 6b8:	96 e9       	ldi	r25, 0x96	; 150
 6ba:	bb 27       	eor	r27, r27
 6bc:	93 95       	inc	r25
 6be:	f6 95       	lsr	r31
 6c0:	87 95       	ror	r24
 6c2:	77 95       	ror	r23
 6c4:	67 95       	ror	r22
 6c6:	b7 95       	ror	r27
 6c8:	f1 11       	cpse	r31, r1
 6ca:	f8 cf       	rjmp	.-16     	; 0x6bc <__floatsisf+0x1c>
 6cc:	fa f4       	brpl	.+62     	; 0x70c <__floatsisf+0x6c>
 6ce:	bb 0f       	add	r27, r27
 6d0:	11 f4       	brne	.+4      	; 0x6d6 <__floatsisf+0x36>
 6d2:	60 ff       	sbrs	r22, 0
 6d4:	1b c0       	rjmp	.+54     	; 0x70c <__floatsisf+0x6c>
 6d6:	6f 5f       	subi	r22, 0xFF	; 255
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	16 c0       	rjmp	.+44     	; 0x70c <__floatsisf+0x6c>
 6e0:	88 23       	and	r24, r24
 6e2:	11 f0       	breq	.+4      	; 0x6e8 <__floatsisf+0x48>
 6e4:	96 e9       	ldi	r25, 0x96	; 150
 6e6:	11 c0       	rjmp	.+34     	; 0x70a <__floatsisf+0x6a>
 6e8:	77 23       	and	r23, r23
 6ea:	21 f0       	breq	.+8      	; 0x6f4 <__floatsisf+0x54>
 6ec:	9e e8       	ldi	r25, 0x8E	; 142
 6ee:	87 2f       	mov	r24, r23
 6f0:	76 2f       	mov	r23, r22
 6f2:	05 c0       	rjmp	.+10     	; 0x6fe <__floatsisf+0x5e>
 6f4:	66 23       	and	r22, r22
 6f6:	71 f0       	breq	.+28     	; 0x714 <__floatsisf+0x74>
 6f8:	96 e8       	ldi	r25, 0x86	; 134
 6fa:	86 2f       	mov	r24, r22
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	60 e0       	ldi	r22, 0x00	; 0
 700:	2a f0       	brmi	.+10     	; 0x70c <__floatsisf+0x6c>
 702:	9a 95       	dec	r25
 704:	66 0f       	add	r22, r22
 706:	77 1f       	adc	r23, r23
 708:	88 1f       	adc	r24, r24
 70a:	da f7       	brpl	.-10     	; 0x702 <__floatsisf+0x62>
 70c:	88 0f       	add	r24, r24
 70e:	96 95       	lsr	r25
 710:	87 95       	ror	r24
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret

00000716 <__fp_cmp>:
 716:	99 0f       	add	r25, r25
 718:	00 08       	sbc	r0, r0
 71a:	55 0f       	add	r21, r21
 71c:	aa 0b       	sbc	r26, r26
 71e:	e0 e8       	ldi	r30, 0x80	; 128
 720:	fe ef       	ldi	r31, 0xFE	; 254
 722:	16 16       	cp	r1, r22
 724:	17 06       	cpc	r1, r23
 726:	e8 07       	cpc	r30, r24
 728:	f9 07       	cpc	r31, r25
 72a:	c0 f0       	brcs	.+48     	; 0x75c <__fp_cmp+0x46>
 72c:	12 16       	cp	r1, r18
 72e:	13 06       	cpc	r1, r19
 730:	e4 07       	cpc	r30, r20
 732:	f5 07       	cpc	r31, r21
 734:	98 f0       	brcs	.+38     	; 0x75c <__fp_cmp+0x46>
 736:	62 1b       	sub	r22, r18
 738:	73 0b       	sbc	r23, r19
 73a:	84 0b       	sbc	r24, r20
 73c:	95 0b       	sbc	r25, r21
 73e:	39 f4       	brne	.+14     	; 0x74e <__fp_cmp+0x38>
 740:	0a 26       	eor	r0, r26
 742:	61 f0       	breq	.+24     	; 0x75c <__fp_cmp+0x46>
 744:	23 2b       	or	r18, r19
 746:	24 2b       	or	r18, r20
 748:	25 2b       	or	r18, r21
 74a:	21 f4       	brne	.+8      	; 0x754 <__fp_cmp+0x3e>
 74c:	08 95       	ret
 74e:	0a 26       	eor	r0, r26
 750:	09 f4       	brne	.+2      	; 0x754 <__fp_cmp+0x3e>
 752:	a1 40       	sbci	r26, 0x01	; 1
 754:	a6 95       	lsr	r26
 756:	8f ef       	ldi	r24, 0xFF	; 255
 758:	81 1d       	adc	r24, r1
 75a:	81 1d       	adc	r24, r1
 75c:	08 95       	ret

0000075e <__fp_inf>:
 75e:	97 f9       	bld	r25, 7
 760:	9f 67       	ori	r25, 0x7F	; 127
 762:	80 e8       	ldi	r24, 0x80	; 128
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	08 95       	ret

0000076a <__fp_nan>:
 76a:	9f ef       	ldi	r25, 0xFF	; 255
 76c:	80 ec       	ldi	r24, 0xC0	; 192
 76e:	08 95       	ret

00000770 <__fp_pscA>:
 770:	00 24       	eor	r0, r0
 772:	0a 94       	dec	r0
 774:	16 16       	cp	r1, r22
 776:	17 06       	cpc	r1, r23
 778:	18 06       	cpc	r1, r24
 77a:	09 06       	cpc	r0, r25
 77c:	08 95       	ret

0000077e <__fp_pscB>:
 77e:	00 24       	eor	r0, r0
 780:	0a 94       	dec	r0
 782:	12 16       	cp	r1, r18
 784:	13 06       	cpc	r1, r19
 786:	14 06       	cpc	r1, r20
 788:	05 06       	cpc	r0, r21
 78a:	08 95       	ret

0000078c <__fp_round>:
 78c:	09 2e       	mov	r0, r25
 78e:	03 94       	inc	r0
 790:	00 0c       	add	r0, r0
 792:	11 f4       	brne	.+4      	; 0x798 <__fp_round+0xc>
 794:	88 23       	and	r24, r24
 796:	52 f0       	brmi	.+20     	; 0x7ac <__fp_round+0x20>
 798:	bb 0f       	add	r27, r27
 79a:	40 f4       	brcc	.+16     	; 0x7ac <__fp_round+0x20>
 79c:	bf 2b       	or	r27, r31
 79e:	11 f4       	brne	.+4      	; 0x7a4 <__fp_round+0x18>
 7a0:	60 ff       	sbrs	r22, 0
 7a2:	04 c0       	rjmp	.+8      	; 0x7ac <__fp_round+0x20>
 7a4:	6f 5f       	subi	r22, 0xFF	; 255
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	08 95       	ret

000007ae <__fp_split3>:
 7ae:	57 fd       	sbrc	r21, 7
 7b0:	90 58       	subi	r25, 0x80	; 128
 7b2:	44 0f       	add	r20, r20
 7b4:	55 1f       	adc	r21, r21
 7b6:	59 f0       	breq	.+22     	; 0x7ce <__fp_splitA+0x10>
 7b8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ba:	71 f0       	breq	.+28     	; 0x7d8 <__fp_splitA+0x1a>
 7bc:	47 95       	ror	r20

000007be <__fp_splitA>:
 7be:	88 0f       	add	r24, r24
 7c0:	97 fb       	bst	r25, 7
 7c2:	99 1f       	adc	r25, r25
 7c4:	61 f0       	breq	.+24     	; 0x7de <__fp_splitA+0x20>
 7c6:	9f 3f       	cpi	r25, 0xFF	; 255
 7c8:	79 f0       	breq	.+30     	; 0x7e8 <__fp_splitA+0x2a>
 7ca:	87 95       	ror	r24
 7cc:	08 95       	ret
 7ce:	12 16       	cp	r1, r18
 7d0:	13 06       	cpc	r1, r19
 7d2:	14 06       	cpc	r1, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	f2 cf       	rjmp	.-28     	; 0x7bc <__fp_split3+0xe>
 7d8:	46 95       	lsr	r20
 7da:	f1 df       	rcall	.-30     	; 0x7be <__fp_splitA>
 7dc:	08 c0       	rjmp	.+16     	; 0x7ee <__fp_splitA+0x30>
 7de:	16 16       	cp	r1, r22
 7e0:	17 06       	cpc	r1, r23
 7e2:	18 06       	cpc	r1, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	f1 cf       	rjmp	.-30     	; 0x7ca <__fp_splitA+0xc>
 7e8:	86 95       	lsr	r24
 7ea:	71 05       	cpc	r23, r1
 7ec:	61 05       	cpc	r22, r1
 7ee:	08 94       	sec
 7f0:	08 95       	ret

000007f2 <__fp_zero>:
 7f2:	e8 94       	clt

000007f4 <__fp_szero>:
 7f4:	bb 27       	eor	r27, r27
 7f6:	66 27       	eor	r22, r22
 7f8:	77 27       	eor	r23, r23
 7fa:	cb 01       	movw	r24, r22
 7fc:	97 f9       	bld	r25, 7
 7fe:	08 95       	ret

00000800 <__gesf2>:
 800:	8a df       	rcall	.-236    	; 0x716 <__fp_cmp>
 802:	08 f4       	brcc	.+2      	; 0x806 <__gesf2+0x6>
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	08 95       	ret

00000808 <__mulsf3>:
 808:	0a d0       	rcall	.+20     	; 0x81e <__mulsf3x>
 80a:	c0 cf       	rjmp	.-128    	; 0x78c <__fp_round>
 80c:	b1 df       	rcall	.-158    	; 0x770 <__fp_pscA>
 80e:	28 f0       	brcs	.+10     	; 0x81a <__mulsf3+0x12>
 810:	b6 df       	rcall	.-148    	; 0x77e <__fp_pscB>
 812:	18 f0       	brcs	.+6      	; 0x81a <__mulsf3+0x12>
 814:	95 23       	and	r25, r21
 816:	09 f0       	breq	.+2      	; 0x81a <__mulsf3+0x12>
 818:	a2 cf       	rjmp	.-188    	; 0x75e <__fp_inf>
 81a:	a7 cf       	rjmp	.-178    	; 0x76a <__fp_nan>
 81c:	eb cf       	rjmp	.-42     	; 0x7f4 <__fp_szero>

0000081e <__mulsf3x>:
 81e:	c7 df       	rcall	.-114    	; 0x7ae <__fp_split3>
 820:	a8 f3       	brcs	.-22     	; 0x80c <__mulsf3+0x4>

00000822 <__mulsf3_pse>:
 822:	99 23       	and	r25, r25
 824:	d9 f3       	breq	.-10     	; 0x81c <__mulsf3+0x14>
 826:	55 23       	and	r21, r21
 828:	c9 f3       	breq	.-14     	; 0x81c <__mulsf3+0x14>
 82a:	95 0f       	add	r25, r21
 82c:	50 e0       	ldi	r21, 0x00	; 0
 82e:	55 1f       	adc	r21, r21
 830:	aa 27       	eor	r26, r26
 832:	ee 27       	eor	r30, r30
 834:	ff 27       	eor	r31, r31
 836:	bb 27       	eor	r27, r27
 838:	00 24       	eor	r0, r0
 83a:	08 94       	sec
 83c:	67 95       	ror	r22
 83e:	20 f4       	brcc	.+8      	; 0x848 <__mulsf3_pse+0x26>
 840:	e2 0f       	add	r30, r18
 842:	f3 1f       	adc	r31, r19
 844:	b4 1f       	adc	r27, r20
 846:	0a 1e       	adc	r0, r26
 848:	22 0f       	add	r18, r18
 84a:	33 1f       	adc	r19, r19
 84c:	44 1f       	adc	r20, r20
 84e:	aa 1f       	adc	r26, r26
 850:	66 95       	lsr	r22
 852:	a9 f7       	brne	.-22     	; 0x83e <__mulsf3_pse+0x1c>
 854:	77 95       	ror	r23
 856:	30 f4       	brcc	.+12     	; 0x864 <__mulsf3_pse+0x42>
 858:	f3 0f       	add	r31, r19
 85a:	b4 1f       	adc	r27, r20
 85c:	0a 1e       	adc	r0, r26
 85e:	12 1e       	adc	r1, r18
 860:	08 f4       	brcc	.+2      	; 0x864 <__mulsf3_pse+0x42>
 862:	63 95       	inc	r22
 864:	33 0f       	add	r19, r19
 866:	44 1f       	adc	r20, r20
 868:	aa 1f       	adc	r26, r26
 86a:	22 1f       	adc	r18, r18
 86c:	76 95       	lsr	r23
 86e:	99 f7       	brne	.-26     	; 0x856 <__mulsf3_pse+0x34>
 870:	87 95       	ror	r24
 872:	20 f4       	brcc	.+8      	; 0x87c <__mulsf3_pse+0x5a>
 874:	b4 0f       	add	r27, r20
 876:	0a 1e       	adc	r0, r26
 878:	12 1e       	adc	r1, r18
 87a:	63 1f       	adc	r22, r19
 87c:	44 0f       	add	r20, r20
 87e:	aa 1f       	adc	r26, r26
 880:	22 1f       	adc	r18, r18
 882:	33 1f       	adc	r19, r19
 884:	86 95       	lsr	r24
 886:	a9 f7       	brne	.-22     	; 0x872 <__mulsf3_pse+0x50>
 888:	86 2f       	mov	r24, r22
 88a:	71 2d       	mov	r23, r1
 88c:	60 2d       	mov	r22, r0
 88e:	11 24       	eor	r1, r1
 890:	9f 57       	subi	r25, 0x7F	; 127
 892:	50 40       	sbci	r21, 0x00	; 0
 894:	8a f0       	brmi	.+34     	; 0x8b8 <__mulsf3_pse+0x96>
 896:	e1 f0       	breq	.+56     	; 0x8d0 <__mulsf3_pse+0xae>
 898:	88 23       	and	r24, r24
 89a:	4a f0       	brmi	.+18     	; 0x8ae <__mulsf3_pse+0x8c>
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	bb 1f       	adc	r27, r27
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	91 50       	subi	r25, 0x01	; 1
 8aa:	50 40       	sbci	r21, 0x00	; 0
 8ac:	a9 f7       	brne	.-22     	; 0x898 <__mulsf3_pse+0x76>
 8ae:	9e 3f       	cpi	r25, 0xFE	; 254
 8b0:	51 05       	cpc	r21, r1
 8b2:	70 f0       	brcs	.+28     	; 0x8d0 <__mulsf3_pse+0xae>
 8b4:	54 cf       	rjmp	.-344    	; 0x75e <__fp_inf>
 8b6:	9e cf       	rjmp	.-196    	; 0x7f4 <__fp_szero>
 8b8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ba:	ec f3       	brlt	.-6      	; 0x8b6 <__mulsf3_pse+0x94>
 8bc:	98 3e       	cpi	r25, 0xE8	; 232
 8be:	dc f3       	brlt	.-10     	; 0x8b6 <__mulsf3_pse+0x94>
 8c0:	86 95       	lsr	r24
 8c2:	77 95       	ror	r23
 8c4:	67 95       	ror	r22
 8c6:	b7 95       	ror	r27
 8c8:	f7 95       	ror	r31
 8ca:	e7 95       	ror	r30
 8cc:	9f 5f       	subi	r25, 0xFF	; 255
 8ce:	c1 f7       	brne	.-16     	; 0x8c0 <__mulsf3_pse+0x9e>
 8d0:	fe 2b       	or	r31, r30
 8d2:	88 0f       	add	r24, r24
 8d4:	91 1d       	adc	r25, r1
 8d6:	96 95       	lsr	r25
 8d8:	87 95       	ror	r24
 8da:	97 f9       	bld	r25, 7
 8dc:	08 95       	ret

000008de <__udivmodhi4>:
 8de:	aa 1b       	sub	r26, r26
 8e0:	bb 1b       	sub	r27, r27
 8e2:	51 e1       	ldi	r21, 0x11	; 17
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <__udivmodhi4_ep>

000008e6 <__udivmodhi4_loop>:
 8e6:	aa 1f       	adc	r26, r26
 8e8:	bb 1f       	adc	r27, r27
 8ea:	a6 17       	cp	r26, r22
 8ec:	b7 07       	cpc	r27, r23
 8ee:	10 f0       	brcs	.+4      	; 0x8f4 <__udivmodhi4_ep>
 8f0:	a6 1b       	sub	r26, r22
 8f2:	b7 0b       	sbc	r27, r23

000008f4 <__udivmodhi4_ep>:
 8f4:	88 1f       	adc	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	5a 95       	dec	r21
 8fa:	a9 f7       	brne	.-22     	; 0x8e6 <__udivmodhi4_loop>
 8fc:	80 95       	com	r24
 8fe:	90 95       	com	r25
 900:	bc 01       	movw	r22, r24
 902:	cd 01       	movw	r24, r26
 904:	08 95       	ret

00000906 <_exit>:
 906:	f8 94       	cli

00000908 <__stop_program>:
 908:	ff cf       	rjmp	.-2      	; 0x908 <__stop_program>
